
rubber-ducky-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d8  080063d8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e0  080063e0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080063e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  20000180  08006568  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000d04  20000aa4  08006568  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f3b  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9c  00000000  00000000  000330eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00035f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184b9  00000000  00000000  00037450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebbf  00000000  00000000  0004f909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008663d  00000000  00000000  0005e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4b05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000e4b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000180 	.word	0x20000180
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006348 	.word	0x08006348

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000184 	.word	0x20000184
 80001d0:	08006348 	.word	0x08006348

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f946 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f812 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f87c 	bl	80005d4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f005 f98a 	bl	80057f4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  USBD_Delay(1000);
 80004e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e4:	f000 f9ae 	bl	8000844 <HAL_Delay>
  while (1)
  {
	USB_Keyboard_SendString("sdsds");
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <main+0x2c>)
 80004ea:	f005 fee5 	bl	80062b8 <USB_Keyboard_SendString>
	USBD_Delay(500);
 80004ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f2:	f000 f9a7 	bl	8000844 <HAL_Delay>
	USB_Keyboard_SendString("sdsds");
 80004f6:	e7f7      	b.n	80004e8 <main+0x1c>
 80004f8:	08006360 	.word	0x08006360

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f005 ff14 	bl	8006338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <SystemClock_Config+0xd0>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a28      	ldr	r2, [pc, #160]	; (80005cc <SystemClock_Config+0xd0>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <SystemClock_Config+0xd0>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <SystemClock_Config+0xd4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd4>)
 800054a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800057a:	2304      	movs	r3, #4
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fd82 	bl	8002090 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000592:	f000 f847 	bl	8000624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 ffe4 	bl	8002580 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005be:	f000 f831 	bl	8000624 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	; 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_GPIO_Init+0x4c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <MX_GPIO_Init+0x4c>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_GPIO_Init+0x4c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <MX_GPIO_Init+0x4c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_GPIO_Init+0x4c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <HAL_MspInit+0x4c>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <HAL_MspInit+0x4c>)
 8000640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000644:	6453      	str	r3, [r2, #68]	; 0x44
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_MspInit+0x4c>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x4c>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_MspInit+0x4c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_MspInit+0x4c>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f89a 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <OTG_FS_IRQHandler+0x10>)
 80006da:	f000 fcbd 	bl	8001058 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000069c 	.word	0x2000069c

080006e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800070c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000744 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000712:	490e      	ldr	r1, [pc, #56]	; (800074c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000714:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000728:	4c0b      	ldr	r4, [pc, #44]	; (8000758 <LoopFillZerobss+0x26>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000736:	f7ff ffd7 	bl	80006e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800073a:	f005 fdd9 	bl	80062f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073e:	f7ff fec5 	bl	80004cc <main>
  bx  lr    
 8000742:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000744:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000750:	080063e8 	.word	0x080063e8
  ldr r2, =_sbss
 8000754:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000758:	20000aa4 	.word	0x20000aa4

0800075c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC_IRQHandler>
	...

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_Init+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <HAL_Init+0x40>)
 800076a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_Init+0x40>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_Init+0x40>)
 8000776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_Init+0x40>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_Init+0x40>)
 8000782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f94f 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f808 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff ff4c 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023c00 	.word	0x40023c00

080007a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f967 	bl	8000a96 <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e0:	f000 f92f 	bl	8000a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_IncTick+0x20>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x24>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_IncTick+0x24>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008
 8000828:	200001c8 	.word	0x200001c8

0800082c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <HAL_GetTick+0x14>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200001c8 	.word	0x200001c8

08000844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800084c:	f7ff ffee 	bl	800082c <HAL_GetTick>
 8000850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800085c:	d005      	beq.n	800086a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_Delay+0x44>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800086a:	bf00      	nop
 800086c:	f7ff ffde 	bl	800082c <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	d8f7      	bhi.n	800086c <HAL_Delay+0x28>
  {
  }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008

0800088c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	60d3      	str	r3, [r2, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_GetPriorityGrouping+0x18>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f003 0307 	and.w	r3, r3, #7
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0b      	blt.n	800091a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <__NVIC_EnableIRQ+0x38>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a0c:	f7ff ff8e 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff29 	bl	800088c <__NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff3e 	bl	80008d4 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff8e 	bl	8000980 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5d 	bl	800092c <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff31 	bl	80008f0 <__NVIC_EnableIRQ>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffa2 	bl	80009e8 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	e159      	b.n	8000d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000acc:	2201      	movs	r2, #1
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f040 8148 	bne.w	8000d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d005      	beq.n	8000b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d130      	bne.n	8000b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4013      	ands	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	68da      	ldr	r2, [r3, #12]
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b38:	2201      	movs	r2, #1
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	091b      	lsrs	r3, r3, #4
 8000b4e:	f003 0201 	and.w	r2, r3, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d017      	beq.n	8000ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d123      	bne.n	8000bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	08da      	lsrs	r2, r3, #3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	691a      	ldr	r2, [r3, #16]
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	08da      	lsrs	r2, r3, #3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3208      	adds	r2, #8
 8000bee:	69b9      	ldr	r1, [r7, #24]
 8000bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0203 	and.w	r2, r3, #3
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80a2 	beq.w	8000d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b57      	ldr	r3, [pc, #348]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a56      	ldr	r2, [pc, #344]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c52:	4a52      	ldr	r2, [pc, #328]	; (8000d9c <HAL_GPIO_Init+0x2ec>)
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3302      	adds	r3, #2
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a49      	ldr	r2, [pc, #292]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d019      	beq.n	8000cb2 <HAL_GPIO_Init+0x202>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <HAL_GPIO_Init+0x2f4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d013      	beq.n	8000cae <HAL_GPIO_Init+0x1fe>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <HAL_GPIO_Init+0x2f8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d00d      	beq.n	8000caa <HAL_GPIO_Init+0x1fa>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a46      	ldr	r2, [pc, #280]	; (8000dac <HAL_GPIO_Init+0x2fc>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d007      	beq.n	8000ca6 <HAL_GPIO_Init+0x1f6>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a45      	ldr	r2, [pc, #276]	; (8000db0 <HAL_GPIO_Init+0x300>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_GPIO_Init+0x1f2>
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	e008      	b.n	8000cb4 <HAL_GPIO_Init+0x204>
 8000ca2:	2307      	movs	r3, #7
 8000ca4:	e006      	b.n	8000cb4 <HAL_GPIO_Init+0x204>
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e004      	b.n	8000cb4 <HAL_GPIO_Init+0x204>
 8000caa:	2302      	movs	r3, #2
 8000cac:	e002      	b.n	8000cb4 <HAL_GPIO_Init+0x204>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_GPIO_Init+0x204>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	69fa      	ldr	r2, [r7, #28]
 8000cb6:	f002 0203 	and.w	r2, r2, #3
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	4093      	lsls	r3, r2
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc4:	4935      	ldr	r1, [pc, #212]	; (8000d9c <HAL_GPIO_Init+0x2ec>)
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cd2:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <HAL_GPIO_Init+0x304>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cf6:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <HAL_GPIO_Init+0x304>)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_GPIO_Init+0x304>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d20:	4a24      	ldr	r2, [pc, #144]	; (8000db4 <HAL_GPIO_Init+0x304>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_GPIO_Init+0x304>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <HAL_GPIO_Init+0x304>)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_GPIO_Init+0x304>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d74:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_GPIO_Init+0x304>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	f67f aea2 	bls.w	8000acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40013800 	.word	0x40013800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40013c00 	.word	0x40013c00

08000db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dba:	b08f      	sub	sp, #60	; 0x3c
 8000dbc:	af0a      	add	r7, sp, #40	; 0x28
 8000dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e10f      	b.n	8000fea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d106      	bne.n	8000dea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f004 fe67 	bl	8005ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fea2 	bl	8002b52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	687e      	ldr	r6, [r7, #4]
 8000e16:	466d      	mov	r5, sp
 8000e18:	f106 0410 	add.w	r4, r6, #16
 8000e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e2c:	1d33      	adds	r3, r6, #4
 8000e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f001 fd79 	bl	8002928 <USB_CoreInit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d005      	beq.n	8000e48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e0d0      	b.n	8000fea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fe90 	bl	8002b74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e04a      	b.n	8000ef0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	333d      	adds	r3, #61	; 0x3d
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	333c      	adds	r3, #60	; 0x3c
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	b298      	uxth	r0, r3
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	3342      	adds	r3, #66	; 0x42
 8000e96:	4602      	mov	r2, r0
 8000e98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	333f      	adds	r3, #63	; 0x3f
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	3344      	adds	r3, #68	; 0x44
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3348      	adds	r3, #72	; 0x48
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3350      	adds	r3, #80	; 0x50
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	3301      	adds	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3af      	bcc.n	8000e5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e044      	b.n	8000f8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	1a9b      	subs	r3, r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3b5      	bcc.n	8000f00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	687e      	ldr	r6, [r7, #4]
 8000f9c:	466d      	mov	r5, sp
 8000f9e:	f106 0410 	add.w	r4, r6, #16
 8000fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fae:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb2:	1d33      	adds	r3, r6, #4
 8000fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f001 fe28 	bl	8002c0c <USB_DevInit>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00d      	b.n	8000fea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fea4 	bl	8003d30 <USB_DevDisconnect>

  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ff2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <HAL_PCD_Start+0x1c>
 800100a:	2302      	movs	r3, #2
 800100c:	e020      	b.n	8001050 <HAL_PCD_Start+0x5e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	2b01      	cmp	r3, #1
 800101c:	d109      	bne.n	8001032 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001022:	2b01      	cmp	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fd7a 	bl	8002b30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fe54 	bl	8003cee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b08d      	sub	sp, #52	; 0x34
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f002 ff12 	bl	8003e98 <USB_GetMode>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	f040 839d 	bne.w	80017b6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fe76 	bl	8003d72 <USB_ReadInterrupts>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 8393 	beq.w	80017b4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fe6d 	bl	8003d72 <USB_ReadInterrupts>
 8001098:	4603      	mov	r3, r0
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d107      	bne.n	80010b2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f002 0202 	and.w	r2, r2, #2
 80010b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fe5b 	bl	8003d72 <USB_ReadInterrupts>
 80010bc:	4603      	mov	r3, r0
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d161      	bne.n	800118a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0210 	bic.w	r2, r2, #16
 80010d4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 020f 	and.w	r2, r3, #15
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	3304      	adds	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	0c5b      	lsrs	r3, r3, #17
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d124      	bne.n	800114c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d035      	beq.n	800117a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	6a38      	ldr	r0, [r7, #32]
 8001122:	f002 fc92 	bl	8003a4a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001132:	441a      	add	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001144:	441a      	add	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	619a      	str	r2, [r3, #24]
 800114a:	e016      	b.n	800117a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	0c5b      	lsrs	r3, r3, #17
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	2b06      	cmp	r3, #6
 8001156:	d110      	bne.n	800117a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800115e:	2208      	movs	r2, #8
 8001160:	4619      	mov	r1, r3
 8001162:	6a38      	ldr	r0, [r7, #32]
 8001164:	f002 fc71 	bl	8003a4a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001174:	441a      	add	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0210 	orr.w	r2, r2, #16
 8001188:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fdef 	bl	8003d72 <USB_ReadInterrupts>
 8001194:	4603      	mov	r3, r0
 8001196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800119a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800119e:	d16e      	bne.n	800127e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fdf5 	bl	8003d98 <USB_ReadDevAllOutEpInterrupt>
 80011ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011b0:	e062      	b.n	8001278 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d057      	beq.n	800126c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 fe1a 	bl	8003e00 <USB_ReadDevOutEPInterrupt>
 80011cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00c      	beq.n	80011f2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	015a      	lsls	r2, r3, #5
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	4413      	add	r3, r2
 80011e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011e4:	461a      	mov	r2, r3
 80011e6:	2301      	movs	r3, #1
 80011e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fd99 	bl	8001d24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	015a      	lsls	r2, r3, #5
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	4413      	add	r3, r2
 8001204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001208:	461a      	mov	r2, r3
 800120a:	2308      	movs	r3, #8
 800120c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800120e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fe93 	bl	8001f3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	015a      	lsls	r2, r3, #5
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	4413      	add	r3, r2
 8001228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800122c:	461a      	mov	r2, r3
 800122e:	2310      	movs	r3, #16
 8001230:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	f003 0320 	and.w	r3, r3, #32
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	015a      	lsls	r2, r3, #5
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	4413      	add	r3, r2
 8001244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001248:	461a      	mov	r2, r3
 800124a:	2320      	movs	r3, #32
 800124c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d009      	beq.n	800126c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	015a      	lsls	r2, r3, #5
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	4413      	add	r3, r2
 8001260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001264:	461a      	mov	r2, r3
 8001266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	3301      	adds	r3, #1
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001274:	085b      	lsrs	r3, r3, #1
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	2b00      	cmp	r3, #0
 800127c:	d199      	bne.n	80011b2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fd75 	bl	8003d72 <USB_ReadInterrupts>
 8001288:	4603      	mov	r3, r0
 800128a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001292:	f040 80c0 	bne.w	8001416 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fd96 	bl	8003dcc <USB_ReadDevAllInEpInterrupt>
 80012a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80012a6:	e0b2      	b.n	800140e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80a7 	beq.w	8001402 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fdbc 	bl	8003e3c <USB_ReadDevInEPInterrupt>
 80012c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d057      	beq.n	8001380 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	2201      	movs	r2, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69f9      	ldr	r1, [r7, #28]
 80012ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012f0:	4013      	ands	r3, r2
 80012f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	015a      	lsls	r2, r3, #5
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
 80012fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001300:	461a      	mov	r2, r3
 8001302:	2301      	movs	r3, #1
 8001304:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d132      	bne.n	8001374 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	3348      	adds	r3, #72	; 0x48
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4403      	add	r3, r0
 800132e:	3344      	adds	r3, #68	; 0x44
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4419      	add	r1, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	1a9b      	subs	r3, r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4403      	add	r3, r0
 8001342:	3348      	adds	r3, #72	; 0x48
 8001344:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	2b00      	cmp	r3, #0
 800134a:	d113      	bne.n	8001374 <HAL_PCD_IRQHandler+0x31c>
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	3350      	adds	r3, #80	; 0x50
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d108      	bne.n	8001374 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800136c:	461a      	mov	r2, r3
 800136e:	2101      	movs	r1, #1
 8001370:	f002 fdc4 	bl	8003efc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f004 fc1d 	bl	8005bba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001396:	461a      	mov	r2, r3
 8001398:	2308      	movs	r3, #8
 800139a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	015a      	lsls	r2, r3, #5
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013b2:	461a      	mov	r2, r3
 80013b4:	2310      	movs	r3, #16
 80013b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ce:	461a      	mov	r2, r3
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	015a      	lsls	r2, r3, #5
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ea:	461a      	mov	r2, r3
 80013ec:	2302      	movs	r3, #2
 80013ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fc03 	bl	8001c08 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	3301      	adds	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f af49 	bne.w	80012a8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fca9 	bl	8003d72 <USB_ReadInterrupts>
 8001420:	4603      	mov	r3, r0
 8001422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800142a:	d122      	bne.n	8001472 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001452:	2100      	movs	r1, #0
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fe0f 	bl	8002078 <HAL_PCDEx_LPM_Callback>
 800145a:	e002      	b.n	8001462 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f004 fc23 	bl	8005ca8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fc7b 	bl	8003d72 <USB_ReadInterrupts>
 800147c:	4603      	mov	r3, r0
 800147e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001486:	d112      	bne.n	80014ae <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b01      	cmp	r3, #1
 8001496:	d102      	bne.n	800149e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f004 fbdf 	bl	8005c5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80014ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fc5d 	bl	8003d72 <USB_ReadInterrupts>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c2:	f040 80c7 	bne.w	8001654 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2110      	movs	r1, #16
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fcf7 	bl	8002ed4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ea:	e056      	b.n	800159a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f8:	461a      	mov	r2, r3
 80014fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80014fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001510:	0151      	lsls	r1, r2, #5
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	440a      	add	r2, r1
 8001516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800151a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800151e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001530:	0151      	lsls	r1, r2, #5
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	440a      	add	r2, r1
 8001536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800153a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800153e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800154c:	461a      	mov	r2, r3
 800154e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001552:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	4413      	add	r3, r2
 800155c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001564:	0151      	lsls	r1, r2, #5
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	440a      	add	r2, r1
 800156a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800156e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001572:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4413      	add	r3, r2
 800157c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001584:	0151      	lsls	r1, r2, #5
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	440a      	add	r2, r1
 800158a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800158e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001592:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001596:	3301      	adds	r3, #1
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3a3      	bcc.n	80014ec <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d016      	beq.n	80015ee <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d0:	f043 030b 	orr.w	r3, r3, #11
 80015d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e6:	f043 030b 	orr.w	r3, r3, #11
 80015ea:	6453      	str	r3, [r2, #68]	; 0x44
 80015ec:	e015      	b.n	800161a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001600:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001604:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001614:	f043 030b 	orr.w	r3, r3, #11
 8001618:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001628:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800162c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800163e:	461a      	mov	r2, r3
 8001640:	f002 fc5c 	bl	8003efc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fb8a 	bl	8003d72 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001668:	d124      	bne.n	80016b4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fc20 	bl	8003eb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fc88 	bl	8002f8e <USB_GetDevSpeed>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681c      	ldr	r4, [r3, #0]
 800168a:	f001 f941 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 800168e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	4620      	mov	r0, r4
 800169a:	f001 f9a7 	bl	80029ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f004 fab3 	bl	8005c0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fb5a 	bl	8003d72 <USB_ReadInterrupts>
 80016be:	4603      	mov	r3, r0
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d10a      	bne.n	80016de <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f004 fa90 	bl	8005bee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f002 0208 	and.w	r2, r2, #8
 80016dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fb45 	bl	8003d72 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016f2:	d10f      	bne.n	8001714 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f004 faf2 	bl	8005ce8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fb2a 	bl	8003d72 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001728:	d10f      	bne.n	800174a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f004 fac5 	bl	8005cc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fb0f 	bl	8003d72 <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800175a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800175e:	d10a      	bne.n	8001776 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f004 fad3 	bl	8005d0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 faf9 	bl	8003d72 <USB_ReadInterrupts>
 8001780:	4603      	mov	r3, r0
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b04      	cmp	r3, #4
 8001788:	d115      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f004 fac3 	bl	8005d28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	e000      	b.n	80017b6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80017b4:	bf00      	nop
    }
  }
}
 80017b6:	3734      	adds	r7, #52	; 0x34
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}

080017bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_PCD_SetAddress+0x1a>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e013      	b.n	80017fe <HAL_PCD_SetAddress+0x42>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fa57 	bl	8003ca2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	4608      	mov	r0, r1
 8001810:	4611      	mov	r1, r2
 8001812:	461a      	mov	r2, r3
 8001814:	4603      	mov	r3, r0
 8001816:	70fb      	strb	r3, [r7, #3]
 8001818:	460b      	mov	r3, r1
 800181a:	803b      	strh	r3, [r7, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001828:	2b00      	cmp	r3, #0
 800182a:	da0f      	bge.n	800184c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	f003 020f 	and.w	r2, r3, #15
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	3338      	adds	r3, #56	; 0x38
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	705a      	strb	r2, [r3, #1]
 800184a:	e00f      	b.n	800186c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	f003 020f 	and.w	r2, r3, #15
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001878:	883a      	ldrh	r2, [r7, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	78ba      	ldrb	r2, [r7, #2]
 8001882:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001896:	78bb      	ldrb	r3, [r7, #2]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d102      	bne.n	80018a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_PCD_EP_Open+0xaa>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e00e      	b.n	80018ce <HAL_PCD_EP_Open+0xc8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fb8a 	bl	8002fd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018cc:	7afb      	ldrb	r3, [r7, #11]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da0f      	bge.n	800190a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	f003 020f 	and.w	r2, r3, #15
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	3338      	adds	r3, #56	; 0x38
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	3304      	adds	r3, #4
 8001900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	705a      	strb	r2, [r3, #1]
 8001908:	e00f      	b.n	800192a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	f003 020f 	and.w	r2, r3, #15
 8001910:	4613      	mov	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	3304      	adds	r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	b2da      	uxtb	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_PCD_EP_Close+0x6e>
 8001940:	2302      	movs	r3, #2
 8001942:	e00e      	b.n	8001962 <HAL_PCD_EP_Close+0x8c>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fbc8 	bl	80030e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	460b      	mov	r3, r1
 8001978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	f003 020f 	and.w	r2, r3, #15
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2200      	movs	r2, #0
 80019aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d102      	bne.n	80019c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	6979      	ldr	r1, [r7, #20]
 80019de:	f001 fea3 	bl	8003728 <USB_EP0StartXfer>
 80019e2:	e008      	b.n	80019f6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	6979      	ldr	r1, [r7, #20]
 80019f2:	f001 fc55 	bl	80032a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	f003 020f 	and.w	r2, r3, #15
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	3338      	adds	r3, #56	; 0x38
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	3304      	adds	r3, #4
 8001a26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a40:	7afb      	ldrb	r3, [r7, #11]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d102      	bne.n	8001a5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	6979      	ldr	r1, [r7, #20]
 8001a72:	f001 fe59 	bl	8003728 <USB_EP0StartXfer>
 8001a76:	e008      	b.n	8001a8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	6979      	ldr	r1, [r7, #20]
 8001a86:	f001 fc0b 	bl	80032a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 020f 	and.w	r2, r3, #15
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d901      	bls.n	8001ab2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e050      	b.n	8001b54 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0f      	bge.n	8001ada <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	3338      	adds	r3, #56	; 0x38
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	3304      	adds	r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	705a      	strb	r2, [r3, #1]
 8001ad8:	e00d      	b.n	8001af6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	3304      	adds	r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_PCD_EP_SetStall+0x82>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e01e      	b.n	8001b54 <HAL_PCD_EP_SetStall+0xc0>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 ffe8 	bl	8003afa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10a      	bne.n	8001b4a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	b2d9      	uxtb	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b44:	461a      	mov	r2, r3
 8001b46:	f002 f9d9 	bl	8003efc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	f003 020f 	and.w	r2, r3, #15
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d901      	bls.n	8001b7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e042      	b.n	8001c00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da0f      	bge.n	8001ba2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	f003 020f 	and.w	r2, r3, #15
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	3338      	adds	r3, #56	; 0x38
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	3304      	adds	r3, #4
 8001b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	705a      	strb	r2, [r3, #1]
 8001ba0:	e00f      	b.n	8001bc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 020f 	and.w	r2, r3, #15
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3304      	adds	r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_PCD_EP_ClrStall+0x86>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e00e      	b.n	8001c00 <HAL_PCD_EP_ClrStall+0xa4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68f9      	ldr	r1, [r7, #12]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 fff0 	bl	8003bd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3338      	adds	r3, #56	; 0x38
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d901      	bls.n	8001c40 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e06c      	b.n	8001d1a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d902      	bls.n	8001c5c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	3303      	adds	r3, #3
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c64:	e02b      	b.n	8001cbe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d902      	bls.n	8001c82 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3303      	adds	r3, #3
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	68d9      	ldr	r1, [r3, #12]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6978      	ldr	r0, [r7, #20]
 8001ca2:	f001 fe94 	bl	80039ce <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	441a      	add	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	441a      	add	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d809      	bhi.n	8001ce8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d203      	bcs.n	8001ce8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1be      	bne.n	8001c66 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d811      	bhi.n	8001d18 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	6939      	ldr	r1, [r7, #16]
 8001d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d14:	4013      	ands	r3, r2
 8001d16:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	333c      	adds	r3, #60	; 0x3c
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	f040 80a0 	bne.w	8001e9c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d015      	beq.n	8001d92 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4a72      	ldr	r2, [pc, #456]	; (8001f34 <PCD_EP_OutXfrComplete_int+0x210>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	f240 80dd 	bls.w	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80d7 	beq.w	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d8e:	6093      	str	r3, [r2, #8]
 8001d90:	e0cb      	b.n	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da8:	461a      	mov	r2, r3
 8001daa:	2320      	movs	r3, #32
 8001dac:	6093      	str	r3, [r2, #8]
 8001dae:	e0bc      	b.n	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 80b7 	bne.w	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a5d      	ldr	r2, [pc, #372]	; (8001f34 <PCD_EP_OutXfrComplete_int+0x210>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d90f      	bls.n	8001de4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de0:	6093      	str	r3, [r2, #8]
 8001de2:	e0a2      	b.n	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001df6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	0159      	lsls	r1, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	440b      	add	r3, r1
 8001e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e0a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4403      	add	r3, r0
 8001e1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e1e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4403      	add	r3, r0
 8001e42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4419      	add	r1, r3
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4403      	add	r3, r0
 8001e58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e5c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d114      	bne.n	8001e8e <PCD_EP_OutXfrComplete_int+0x16a>
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d108      	bne.n	8001e8e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e86:	461a      	mov	r2, r3
 8001e88:	2101      	movs	r1, #1
 8001e8a:	f002 f837 	bl	8003efc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4619      	mov	r1, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f003 fe75 	bl	8005b84 <HAL_PCD_DataOutStageCallback>
 8001e9a:	e046      	b.n	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <PCD_EP_OutXfrComplete_int+0x214>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d124      	bne.n	8001eee <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec0:	6093      	str	r3, [r2, #8]
 8001ec2:	e032      	b.n	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eda:	461a      	mov	r2, r3
 8001edc:	2320      	movs	r3, #32
 8001ede:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f003 fe4c 	bl	8005b84 <HAL_PCD_DataOutStageCallback>
 8001eec:	e01d      	b.n	8001f2a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d114      	bne.n	8001f1e <PCD_EP_OutXfrComplete_int+0x1fa>
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d108      	bne.n	8001f1e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f16:	461a      	mov	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f001 ffef 	bl	8003efc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f003 fe2d 	bl	8005b84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	4f54300a 	.word	0x4f54300a
 8001f38:	4f54310a 	.word	0x4f54310a

08001f3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	333c      	adds	r3, #60	; 0x3c
 8001f54:	3304      	adds	r3, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d90e      	bls.n	8001f90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f003 fde5 	bl	8005b60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d90c      	bls.n	8001fb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d108      	bne.n	8001fb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	f001 ffa2 	bl	8003efc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	4f54300a 	.word	0x4f54300a

08001fc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d107      	bne.n	8001ff6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001fe6:	883b      	ldrh	r3, [r7, #0]
 8001fe8:	0419      	lsls	r1, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ff4:	e028      	b.n	8002048 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	4413      	add	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e00d      	b.n	8002026 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	3340      	adds	r3, #64	; 0x40
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	3301      	adds	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	3b01      	subs	r3, #1
 800202c:	429a      	cmp	r2, r3
 800202e:	d3ec      	bcc.n	800200a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002030:	883b      	ldrh	r3, [r7, #0]
 8002032:	0418      	lsls	r0, r3, #16
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6819      	ldr	r1, [r3, #0]
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	3b01      	subs	r3, #1
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	4302      	orrs	r2, r0
 8002040:	3340      	adds	r3, #64	; 0x40
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e264      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d075      	beq.n	800219a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ae:	4ba3      	ldr	r3, [pc, #652]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d00c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ba:	4ba0      	ldr	r3, [pc, #640]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d112      	bne.n	80020ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c6:	4b9d      	ldr	r3, [pc, #628]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d2:	d10b      	bne.n	80020ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	4b99      	ldr	r3, [pc, #612]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d05b      	beq.n	8002198 <HAL_RCC_OscConfig+0x108>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d157      	bne.n	8002198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e23f      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_OscConfig+0x74>
 80020f6:	4b91      	ldr	r3, [pc, #580]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a90      	ldr	r2, [pc, #576]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e01d      	b.n	8002140 <HAL_RCC_OscConfig+0xb0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x98>
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a8a      	ldr	r2, [pc, #552]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a87      	ldr	r2, [pc, #540]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0xb0>
 8002128:	4b84      	ldr	r3, [pc, #528]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a83      	ldr	r2, [pc, #524]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b81      	ldr	r3, [pc, #516]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a80      	ldr	r2, [pc, #512]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fb70 	bl	800082c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe fb6c 	bl	800082c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e204      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0xc0>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fb5c 	bl	800082c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe fb58 	bl	800082c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1f0      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0xe8>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d063      	beq.n	800226e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a6:	4b65      	ldr	r3, [pc, #404]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b2:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d11c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b5f      	ldr	r3, [pc, #380]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	4b5c      	ldr	r3, [pc, #368]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x152>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1c4      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4952      	ldr	r1, [pc, #328]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	e03a      	b.n	800226e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002200:	4b4f      	ldr	r3, [pc, #316]	; (8002340 <HAL_RCC_OscConfig+0x2b0>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7fe fb11 	bl	800082c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220e:	f7fe fb0d 	bl	800082c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1a5      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	4b46      	ldr	r3, [pc, #280]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4940      	ldr	r1, [pc, #256]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002242:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_RCC_OscConfig+0x2b0>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe faf0 	bl	800082c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002250:	f7fe faec 	bl	800082c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e184      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d030      	beq.n	80022dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d016      	beq.n	80022b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCC_OscConfig+0x2b4>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe fad0 	bl	800082c <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002290:	f7fe facc 	bl	800082c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e164      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x200>
 80022ae:	e015      	b.n	80022dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x2b4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fab9 	bl	800082c <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022be:	f7fe fab5 	bl	800082c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e14d      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a0 	beq.w	800242a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x2b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d121      	bne.n	800236a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_OscConfig+0x2b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_RCC_OscConfig+0x2b8>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7fe fa7b 	bl	800082c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e011      	b.n	800235e <HAL_RCC_OscConfig+0x2ce>
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	42470000 	.word	0x42470000
 8002344:	42470e80 	.word	0x42470e80
 8002348:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7fe fa6e 	bl	800082c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e106      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b85      	ldr	r3, [pc, #532]	; (8002574 <HAL_RCC_OscConfig+0x4e4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d106      	bne.n	8002380 <HAL_RCC_OscConfig+0x2f0>
 8002372:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	4a80      	ldr	r2, [pc, #512]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6713      	str	r3, [r2, #112]	; 0x70
 800237e:	e01c      	b.n	80023ba <HAL_RCC_OscConfig+0x32a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x312>
 8002388:	4b7b      	ldr	r3, [pc, #492]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a7a      	ldr	r2, [pc, #488]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
 8002394:	4b78      	ldr	r3, [pc, #480]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a77      	ldr	r2, [pc, #476]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	e00b      	b.n	80023ba <HAL_RCC_OscConfig+0x32a>
 80023a2:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a74      	ldr	r2, [pc, #464]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	4b72      	ldr	r3, [pc, #456]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	4a71      	ldr	r2, [pc, #452]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe fa33 	bl	800082c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fa2f 	bl	800082c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0c5      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	4b65      	ldr	r3, [pc, #404]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ee      	beq.n	80023ca <HAL_RCC_OscConfig+0x33a>
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fa1d 	bl	800082c <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe fa19 	bl	800082c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0af      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b56      	ldr	r3, [pc, #344]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a55      	ldr	r2, [pc, #340]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 809b 	beq.w	800256a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d05c      	beq.n	80024fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d141      	bne.n	80024cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x4ec>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe f9ed 	bl	800082c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe f9e9 	bl	800082c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e081      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002468:	4b43      	ldr	r3, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	4937      	ldr	r1, [pc, #220]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249e:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCC_OscConfig+0x4ec>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe f9c2 	bl	800082c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe f9be 	bl	800082c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e056      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x41c>
 80024ca:	e04e      	b.n	800256a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_OscConfig+0x4ec>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe f9ab 	bl	800082c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe f9a7 	bl	800082c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e03f      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ec:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x44a>
 80024f8:	e037      	b.n	800256a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e032      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_RCC_OscConfig+0x4e8>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d028      	beq.n	8002566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d121      	bne.n	8002566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d11a      	bne.n	8002566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800253e:	4293      	cmp	r3, r2
 8002540:	d111      	bne.n	8002566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	3b01      	subs	r3, #1
 8002550:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d107      	bne.n	8002566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40007000 	.word	0x40007000
 8002578:	40023800 	.word	0x40023800
 800257c:	42470060 	.word	0x42470060

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0cc      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b68      	ldr	r3, [pc, #416]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d90c      	bls.n	80025bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0b8      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a52      	ldr	r2, [pc, #328]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	494d      	ldr	r1, [pc, #308]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d044      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d119      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e07f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	2b03      	cmp	r3, #3
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e067      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4934      	ldr	r1, [pc, #208]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7fe f8dc 	bl	800082c <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7fe f8d8 	bl	800082c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e04f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d20c      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e032      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4916      	ldr	r1, [pc, #88]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002706:	f000 f821 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	490a      	ldr	r1, [pc, #40]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe f83c 	bl	80007a4 <HAL_InitTick>

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00
 800273c:	40023800 	.word	0x40023800
 8002740:	080063c8 	.word	0x080063c8
 8002744:	20000000 	.word	0x20000000
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	2300      	movs	r3, #0
 800275e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002764:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d00d      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x40>
 8002770:	2b08      	cmp	r3, #8
 8002772:	f200 80bd 	bhi.w	80028f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x34>
 800277a:	2b04      	cmp	r3, #4
 800277c:	d003      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x3a>
 800277e:	e0b7      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002780:	4b61      	ldr	r3, [pc, #388]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002782:	60bb      	str	r3, [r7, #8]
       break;
 8002784:	e0b7      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002786:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002788:	60bb      	str	r3, [r7, #8]
      break;
 800278a:	e0b4      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800278c:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002794:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002796:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04d      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a2:	4b58      	ldr	r3, [pc, #352]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	461a      	mov	r2, r3
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	ea02 0800 	and.w	r8, r2, r0
 80027ba:	ea03 0901 	and.w	r9, r3, r1
 80027be:	4640      	mov	r0, r8
 80027c0:	4649      	mov	r1, r9
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	014b      	lsls	r3, r1, #5
 80027cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027d0:	0142      	lsls	r2, r0, #5
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	ebb0 0008 	subs.w	r0, r0, r8
 80027da:	eb61 0109 	sbc.w	r1, r1, r9
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	018b      	lsls	r3, r1, #6
 80027e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027ec:	0182      	lsls	r2, r0, #6
 80027ee:	1a12      	subs	r2, r2, r0
 80027f0:	eb63 0301 	sbc.w	r3, r3, r1
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	00d9      	lsls	r1, r3, #3
 80027fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002802:	00d0      	lsls	r0, r2, #3
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	eb12 0208 	adds.w	r2, r2, r8
 800280c:	eb43 0309 	adc.w	r3, r3, r9
 8002810:	f04f 0000 	mov.w	r0, #0
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	0259      	lsls	r1, r3, #9
 800281a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800281e:	0250      	lsls	r0, r2, #9
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	461a      	mov	r2, r3
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	f7fd fcd0 	bl	80001d4 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4613      	mov	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e04a      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	461a      	mov	r2, r3
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	ea02 0400 	and.w	r4, r2, r0
 8002856:	ea03 0501 	and.w	r5, r3, r1
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	014b      	lsls	r3, r1, #5
 8002868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800286c:	0142      	lsls	r2, r0, #5
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	1b00      	subs	r0, r0, r4
 8002874:	eb61 0105 	sbc.w	r1, r1, r5
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	018b      	lsls	r3, r1, #6
 8002882:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002886:	0182      	lsls	r2, r0, #6
 8002888:	1a12      	subs	r2, r2, r0
 800288a:	eb63 0301 	sbc.w	r3, r3, r1
 800288e:	f04f 0000 	mov.w	r0, #0
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	00d9      	lsls	r1, r3, #3
 8002898:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800289c:	00d0      	lsls	r0, r2, #3
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	1912      	adds	r2, r2, r4
 80028a4:	eb45 0303 	adc.w	r3, r5, r3
 80028a8:	f04f 0000 	mov.w	r0, #0
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	0299      	lsls	r1, r3, #10
 80028b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028b6:	0290      	lsls	r0, r2, #10
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	f7fd fc84 	bl	80001d4 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4613      	mov	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	3301      	adds	r3, #1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	60bb      	str	r3, [r7, #8]
      break;
 80028ee:	e002      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028f2:	60bb      	str	r3, [r7, #8]
      break;
 80028f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f6:	68bb      	ldr	r3, [r7, #8]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200

08002910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_GetHCLKFreq+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000

08002928 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002928:	b084      	sub	sp, #16
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	f107 001c 	add.w	r0, r7, #28
 8002936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2b01      	cmp	r3, #1
 800293e:	d122      	bne.n	8002986 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f001 fb1c 	bl	8003fb8 <USB_CoreReset>
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e01a      	b.n	80029bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f001 fb10 	bl	8003fb8 <USB_CoreReset>
 8002998:	4603      	mov	r3, r0
 800299a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800299c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
 80029ae:	e005      	b.n	80029bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d10b      	bne.n	80029da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f043 0206 	orr.w	r2, r3, #6
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029e6:	b004      	add	sp, #16
 80029e8:	4770      	bx	lr
	...

080029ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d165      	bne.n	8002acc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <USB_SetTurnaroundTime+0x11c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d906      	bls.n	8002a16 <USB_SetTurnaroundTime+0x2a>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4a40      	ldr	r2, [pc, #256]	; (8002b0c <USB_SetTurnaroundTime+0x120>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d202      	bcs.n	8002a16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a10:	230f      	movs	r3, #15
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e062      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4a3c      	ldr	r2, [pc, #240]	; (8002b0c <USB_SetTurnaroundTime+0x120>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d306      	bcc.n	8002a2c <USB_SetTurnaroundTime+0x40>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4a3b      	ldr	r2, [pc, #236]	; (8002b10 <USB_SetTurnaroundTime+0x124>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d202      	bcs.n	8002a2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a26:	230e      	movs	r3, #14
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e057      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <USB_SetTurnaroundTime+0x124>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d306      	bcc.n	8002a42 <USB_SetTurnaroundTime+0x56>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4a37      	ldr	r2, [pc, #220]	; (8002b14 <USB_SetTurnaroundTime+0x128>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d202      	bcs.n	8002a42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002a3c:	230d      	movs	r3, #13
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e04c      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4a33      	ldr	r2, [pc, #204]	; (8002b14 <USB_SetTurnaroundTime+0x128>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d306      	bcc.n	8002a58 <USB_SetTurnaroundTime+0x6c>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <USB_SetTurnaroundTime+0x12c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d802      	bhi.n	8002a58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002a52:	230c      	movs	r3, #12
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e041      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4a2f      	ldr	r2, [pc, #188]	; (8002b18 <USB_SetTurnaroundTime+0x12c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d906      	bls.n	8002a6e <USB_SetTurnaroundTime+0x82>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4a2e      	ldr	r2, [pc, #184]	; (8002b1c <USB_SetTurnaroundTime+0x130>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d802      	bhi.n	8002a6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002a68:	230b      	movs	r3, #11
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e036      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4a2a      	ldr	r2, [pc, #168]	; (8002b1c <USB_SetTurnaroundTime+0x130>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d906      	bls.n	8002a84 <USB_SetTurnaroundTime+0x98>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <USB_SetTurnaroundTime+0x134>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d802      	bhi.n	8002a84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002a7e:	230a      	movs	r3, #10
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e02b      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <USB_SetTurnaroundTime+0x134>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d906      	bls.n	8002a9a <USB_SetTurnaroundTime+0xae>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <USB_SetTurnaroundTime+0x138>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d202      	bcs.n	8002a9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002a94:	2309      	movs	r3, #9
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e020      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <USB_SetTurnaroundTime+0x138>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d306      	bcc.n	8002ab0 <USB_SetTurnaroundTime+0xc4>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <USB_SetTurnaroundTime+0x13c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d802      	bhi.n	8002ab0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e015      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <USB_SetTurnaroundTime+0x13c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d906      	bls.n	8002ac6 <USB_SetTurnaroundTime+0xda>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <USB_SetTurnaroundTime+0x140>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d202      	bcs.n	8002ac6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e00a      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e007      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ad2:	2309      	movs	r3, #9
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e001      	b.n	8002adc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ad8:	2309      	movs	r3, #9
 8002ada:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	00d8acbf 	.word	0x00d8acbf
 8002b0c:	00e4e1c0 	.word	0x00e4e1c0
 8002b10:	00f42400 	.word	0x00f42400
 8002b14:	01067380 	.word	0x01067380
 8002b18:	011a499f 	.word	0x011a499f
 8002b1c:	01312cff 	.word	0x01312cff
 8002b20:	014ca43f 	.word	0x014ca43f
 8002b24:	016e3600 	.word	0x016e3600
 8002b28:	01a6ab1f 	.word	0x01a6ab1f
 8002b2c:	01e84800 	.word	0x01e84800

08002b30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0201 	bic.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d115      	bne.n	8002bc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7fd fe4e 	bl	8000844 <HAL_Delay>
      ms++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f001 f972 	bl	8003e98 <USB_GetMode>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d01e      	beq.n	8002bf8 <USB_SetCurrentMode+0x84>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b31      	cmp	r3, #49	; 0x31
 8002bbe:	d9f0      	bls.n	8002ba2 <USB_SetCurrentMode+0x2e>
 8002bc0:	e01a      	b.n	8002bf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d115      	bne.n	8002bf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f7fd fe35 	bl	8000844 <HAL_Delay>
      ms++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f001 f959 	bl	8003e98 <USB_GetMode>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <USB_SetCurrentMode+0x84>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b31      	cmp	r3, #49	; 0x31
 8002bf0:	d9f0      	bls.n	8002bd4 <USB_SetCurrentMode+0x60>
 8002bf2:	e001      	b.n	8002bf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e005      	b.n	8002c04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b32      	cmp	r3, #50	; 0x32
 8002bfc:	d101      	bne.n	8002c02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	e009      	b.n	8002c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	3340      	adds	r3, #64	; 0x40
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b0e      	cmp	r3, #14
 8002c44:	d9f2      	bls.n	8002c2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11c      	bne.n	8002c86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
 8002c84:	e00b      	b.n	8002c9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb8:	461a      	mov	r2, r3
 8002cba:	680b      	ldr	r3, [r1, #0]
 8002cbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10c      	bne.n	8002cde <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f945 	bl	8002f5c <USB_SetDevSpeed>
 8002cd2:	e008      	b.n	8002ce6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f940 	bl	8002f5c <USB_SetDevSpeed>
 8002cdc:	e003      	b.n	8002ce6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002cde:	2103      	movs	r1, #3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f93b 	bl	8002f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ce6:	2110      	movs	r1, #16
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f8f3 	bl	8002ed4 <USB_FlushTxFifo>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f90f 	bl	8002f1c <USB_FlushRxFifo>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2300      	movs	r3, #0
 8002d12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d26:	461a      	mov	r2, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e043      	b.n	8002dba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d48:	d118      	bne.n	8002d7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e013      	b.n	8002d8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d72:	461a      	mov	r2, r3
 8002d74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e008      	b.n	8002d8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dac:	461a      	mov	r2, r3
 8002dae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002db2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	3301      	adds	r3, #1
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3b7      	bcc.n	8002d32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	e043      	b.n	8002e50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dde:	d118      	bne.n	8002e12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10a      	bne.n	8002dfc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df2:	461a      	mov	r2, r3
 8002df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e013      	b.n	8002e24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	e008      	b.n	8002e24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2300      	movs	r3, #0
 8002e22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e30:	461a      	mov	r2, r3
 8002e32:	2300      	movs	r3, #0
 8002e34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e42:	461a      	mov	r2, r3
 8002e44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d3b7      	bcc.n	8002dc8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002e78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f043 0210 	orr.w	r2, r3, #16
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699a      	ldr	r2, [r3, #24]
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <USB_DevInit+0x2c4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f043 0208 	orr.w	r2, r3, #8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ecc:	b004      	add	sp, #16
 8002ece:	4770      	bx	lr
 8002ed0:	803c3800 	.word	0x803c3800

08002ed4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	f043 0220 	orr.w	r2, r3, #32
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <USB_FlushTxFifo+0x44>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e006      	b.n	8002f0c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d0f1      	beq.n	8002eee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	00030d40 	.word	0x00030d40

08002f1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <USB_FlushRxFifo+0x3c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e006      	b.n	8002f4c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d0f1      	beq.n	8002f2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	00030d40 	.word	0x00030d40

08002f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b087      	sub	sp, #28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0306 	and.w	r3, r3, #6
 8002fa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]
 8002fb2:	e00a      	b.n	8002fca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d002      	beq.n	8002fc0 <USB_GetDevSpeed+0x32>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b06      	cmp	r3, #6
 8002fbe:	d102      	bne.n	8002fc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	75fb      	strb	r3, [r7, #23]
 8002fc4:	e001      	b.n	8002fca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	785b      	ldrb	r3, [r3, #1]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d13a      	bne.n	800306a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003012:	4313      	orrs	r3, r2
 8003014:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d155      	bne.n	80030d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003048:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	059b      	lsls	r3, r3, #22
 800304e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003050:	4313      	orrs	r3, r2
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	0151      	lsls	r1, r2, #5
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	440a      	add	r2, r1
 800305a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	e036      	b.n	80030d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	68f9      	ldr	r1, [r7, #12]
 8003084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003088:	4313      	orrs	r3, r2
 800308a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11a      	bne.n	80030d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	78db      	ldrb	r3, [r3, #3]
 80030bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030be:	430b      	orrs	r3, r1
 80030c0:	4313      	orrs	r3, r2
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	0151      	lsls	r1, r2, #5
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	440a      	add	r2, r1
 80030ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d161      	bne.n	80031c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800311a:	d11f      	bne.n	800315c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	0151      	lsls	r1, r2, #5
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	440a      	add	r2, r1
 8003132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800313a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	0151      	lsls	r1, r2, #5
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	440a      	add	r2, r1
 8003152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800315a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	b29b      	uxth	r3, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800317c:	4013      	ands	r3, r2
 800317e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	b29b      	uxth	r3, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031a0:	4013      	ands	r3, r2
 80031a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	0159      	lsls	r1, r3, #5
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	440b      	add	r3, r1
 80031ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031be:	4619      	mov	r1, r3
 80031c0:	4b35      	ldr	r3, [pc, #212]	; (8003298 <USB_DeactivateEndpoint+0x1b0>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
 80031c6:	e060      	b.n	800328a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031de:	d11f      	bne.n	8003220 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	440a      	add	r2, r1
 8003216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800321a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800321e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	43db      	mvns	r3, r3
 800323a:	68f9      	ldr	r1, [r7, #12]
 800323c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003240:	4013      	ands	r3, r2
 8003242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	041b      	lsls	r3, r3, #16
 800325c:	43db      	mvns	r3, r3
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003264:	4013      	ands	r3, r2
 8003266:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	0159      	lsls	r1, r3, #5
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	440b      	add	r3, r1
 800327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003282:	4619      	mov	r1, r3
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <USB_DeactivateEndpoint+0x1b4>)
 8003286:	4013      	ands	r3, r2
 8003288:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	ec337800 	.word	0xec337800
 800329c:	eff37800 	.word	0xeff37800

080032a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f040 815c 	bne.w	800357a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d132      	bne.n	8003330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	0151      	lsls	r1, r2, #5
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	440a      	add	r2, r1
 80032e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80032e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80032ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	440a      	add	r2, r1
 8003304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003308:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800330c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	0151      	lsls	r1, r2, #5
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	440a      	add	r2, r1
 8003324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003328:	0cdb      	lsrs	r3, r3, #19
 800332a:	04db      	lsls	r3, r3, #19
 800332c:	6113      	str	r3, [r2, #16]
 800332e:	e074      	b.n	800341a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	440a      	add	r2, r1
 8003346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800334a:	0cdb      	lsrs	r3, r3, #19
 800334c:	04db      	lsls	r3, r3, #19
 800334e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	440a      	add	r2, r1
 8003366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800336a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800336e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6959      	ldr	r1, [r3, #20]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	440b      	add	r3, r1
 800338c:	1e59      	subs	r1, r3, #1
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	fbb1 f3f3 	udiv	r3, r1, r3
 8003396:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003398:	4b9d      	ldr	r3, [pc, #628]	; (8003610 <USB_EPStartXfer+0x370>)
 800339a:	400b      	ands	r3, r1
 800339c:	69b9      	ldr	r1, [r7, #24]
 800339e:	0148      	lsls	r0, r1, #5
 80033a0:	69f9      	ldr	r1, [r7, #28]
 80033a2:	4401      	add	r1, r0
 80033a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033a8:	4313      	orrs	r3, r2
 80033aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	0148      	lsls	r0, r1, #5
 80033c6:	69f9      	ldr	r1, [r7, #28]
 80033c8:	4401      	add	r1, r0
 80033ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033ce:	4313      	orrs	r3, r2
 80033d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	78db      	ldrb	r3, [r3, #3]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d11f      	bne.n	800341a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80033f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	0151      	lsls	r1, r2, #5
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	440a      	add	r2, r1
 8003410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003418:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d14b      	bne.n	80034b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003434:	461a      	mov	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	78db      	ldrb	r3, [r3, #3]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d128      	bne.n	8003496 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d110      	bne.n	8003476 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	0151      	lsls	r1, r2, #5
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	440a      	add	r2, r1
 800346a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800346e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	e00f      	b.n	8003496 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	440a      	add	r2, r1
 800348c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	0151      	lsls	r1, r2, #5
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	440a      	add	r2, r1
 80034ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e12f      	b.n	8003718 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	78db      	ldrb	r3, [r3, #3]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d015      	beq.n	800350c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8117 	beq.w	8003718 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	69f9      	ldr	r1, [r7, #28]
 8003502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003506:	4313      	orrs	r3, r2
 8003508:	634b      	str	r3, [r1, #52]	; 0x34
 800350a:	e105      	b.n	8003718 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d110      	bne.n	800353e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	440a      	add	r2, r1
 8003532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	e00f      	b.n	800355e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	440a      	add	r2, r1
 8003554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	68d9      	ldr	r1, [r3, #12]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	b298      	uxth	r0, r3
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4603      	mov	r3, r0
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa2b 	bl	80039ce <USB_WritePacket>
 8003578:	e0ce      	b.n	8003718 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	0151      	lsls	r1, r2, #5
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	440a      	add	r2, r1
 8003590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003594:	0cdb      	lsrs	r3, r3, #19
 8003596:	04db      	lsls	r3, r3, #19
 8003598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	0151      	lsls	r1, r2, #5
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	440a      	add	r2, r1
 80035b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d126      	bne.n	8003614 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	0148      	lsls	r0, r1, #5
 80035e0:	69f9      	ldr	r1, [r7, #28]
 80035e2:	4401      	add	r1, r0
 80035e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80035e8:	4313      	orrs	r3, r2
 80035ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	440a      	add	r2, r1
 8003602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800360a:	6113      	str	r3, [r2, #16]
 800360c:	e036      	b.n	800367c <USB_EPStartXfer+0x3dc>
 800360e:	bf00      	nop
 8003610:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4413      	add	r3, r2
 800361e:	1e5a      	subs	r2, r3, #1
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	8afb      	ldrh	r3, [r7, #22]
 800363a:	04d9      	lsls	r1, r3, #19
 800363c:	4b39      	ldr	r3, [pc, #228]	; (8003724 <USB_EPStartXfer+0x484>)
 800363e:	400b      	ands	r3, r1
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	0148      	lsls	r0, r1, #5
 8003644:	69f9      	ldr	r1, [r7, #28]
 8003646:	4401      	add	r1, r0
 8003648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800364c:	4313      	orrs	r3, r2
 800364e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	8af9      	ldrh	r1, [r7, #22]
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	0148      	lsls	r0, r1, #5
 8003670:	69f9      	ldr	r1, [r7, #28]
 8003672:	4401      	add	r1, r0
 8003674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d10d      	bne.n	800369e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	68d9      	ldr	r1, [r3, #12]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	460a      	mov	r2, r1
 800369c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	78db      	ldrb	r3, [r3, #3]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d128      	bne.n	80036f8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d110      	bne.n	80036d8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e00f      	b.n	80036f8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	0151      	lsls	r1, r2, #5
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	440a      	add	r2, r1
 80036ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	0151      	lsls	r1, r2, #5
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	440a      	add	r2, r1
 800370e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003712:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	1ff80000 	.word	0x1ff80000

08003728 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b01      	cmp	r3, #1
 8003746:	f040 80cd 	bne.w	80038e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d132      	bne.n	80037b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	440a      	add	r2, r1
 8003768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003770:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003794:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b0:	0cdb      	lsrs	r3, r3, #19
 80037b2:	04db      	lsls	r3, r3, #19
 80037b4:	6113      	str	r3, [r2, #16]
 80037b6:	e04e      	b.n	8003856 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d2:	0cdb      	lsrs	r3, r3, #19
 80037d4:	04db      	lsls	r3, r3, #19
 80037d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d903      	bls.n	8003810 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	440a      	add	r2, r1
 8003826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800382e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003846:	6939      	ldr	r1, [r7, #16]
 8003848:	0148      	lsls	r0, r1, #5
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	4401      	add	r1, r0
 800384e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003852:	4313      	orrs	r3, r2
 8003854:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11e      	bne.n	800389a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	461a      	mov	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	440a      	add	r2, r1
 800388e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e092      	b.n	80039c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	0151      	lsls	r1, r2, #5
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	440a      	add	r2, r1
 80038b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d07e      	beq.n	80039c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	6979      	ldr	r1, [r7, #20]
 80038da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038de:	4313      	orrs	r3, r2
 80038e0:	634b      	str	r3, [r1, #52]	; 0x34
 80038e2:	e06d      	b.n	80039c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	0151      	lsls	r1, r2, #5
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	440a      	add	r2, r1
 80038fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038fe:	0cdb      	lsrs	r3, r3, #19
 8003900:	04db      	lsls	r3, r3, #19
 8003902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	440a      	add	r2, r1
 800391a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003922:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003926:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	440a      	add	r2, r1
 800394e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003956:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396e:	6939      	ldr	r1, [r7, #16]
 8003970:	0148      	lsls	r0, r1, #5
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	4401      	add	r1, r0
 8003976:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10d      	bne.n	80039a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	68d9      	ldr	r1, [r3, #12]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	460a      	mov	r2, r1
 800399e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b089      	sub	sp, #36	; 0x24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	4611      	mov	r1, r2
 80039da:	461a      	mov	r2, r3
 80039dc:	460b      	mov	r3, r1
 80039de:	71fb      	strb	r3, [r7, #7]
 80039e0:	4613      	mov	r3, r2
 80039e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80039ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d123      	bne.n	8003a3c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80039f4:	88bb      	ldrh	r3, [r7, #4]
 80039f6:	3303      	adds	r3, #3
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e018      	b.n	8003a34 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	031a      	lsls	r2, r3, #12
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0e:	461a      	mov	r2, r3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3e2      	bcc.n	8003a02 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b08b      	sub	sp, #44	; 0x2c
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	089b      	lsrs	r3, r3, #2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003a70:	2300      	movs	r3, #0
 8003a72:	623b      	str	r3, [r7, #32]
 8003a74:	e014      	b.n	8003aa0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	3301      	adds	r3, #1
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	3301      	adds	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	3301      	adds	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d3e6      	bcc.n	8003a76 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003aa8:	8bfb      	ldrh	r3, [r7, #30]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01e      	beq.n	8003aec <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f107 0310 	add.w	r3, r7, #16
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	701a      	strb	r2, [r3, #0]
      i++;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	3301      	adds	r3, #1
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003ae0:	8bfb      	ldrh	r3, [r7, #30]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ae6:	8bfb      	ldrh	r3, [r7, #30]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ea      	bne.n	8003ac2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	372c      	adds	r7, #44	; 0x2c
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d12c      	bne.n	8003b70 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	db12      	blt.n	8003b4e <USB_EPSetStall+0x54>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00f      	beq.n	8003b4e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b4c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	0151      	lsls	r1, r2, #5
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	440a      	add	r2, r1
 8003b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e02b      	b.n	8003bc8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	db12      	blt.n	8003ba8 <USB_EPSetStall+0xae>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00f      	beq.n	8003ba8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ba6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	0151      	lsls	r1, r2, #5
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	440a      	add	r2, r1
 8003bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d128      	bne.n	8003c44 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	78db      	ldrb	r3, [r3, #3]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d003      	beq.n	8003c22 <USB_EPClearStall+0x4c>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	78db      	ldrb	r3, [r3, #3]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d138      	bne.n	8003c94 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e027      	b.n	8003c94 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	78db      	ldrb	r3, [r3, #3]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d003      	beq.n	8003c74 <USB_EPClearStall+0x9e>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	78db      	ldrb	r3, [r3, #3]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d10f      	bne.n	8003c94 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	0151      	lsls	r1, r2, #5
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	440a      	add	r2, r1
 8003c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cc4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d08:	f023 0303 	bic.w	r3, r3, #3
 8003d0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1c:	f023 0302 	bic.w	r3, r3, #2
 8003d20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5e:	f043 0302 	orr.w	r3, r3, #2
 8003d62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4013      	ands	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4013      	ands	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	b29b      	uxth	r3, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	01db      	lsls	r3, r3, #7
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ece:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	460b      	mov	r3, r1
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	333c      	adds	r3, #60	; 0x3c
 8003f12:	3304      	adds	r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <USB_EP0_OutStart+0xb8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d90a      	bls.n	8003f36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f30:	d101      	bne.n	8003f36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e037      	b.n	8003fa6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f64:	f043 0318 	orr.w	r3, r3, #24
 8003f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003f7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10f      	bne.n	8003fa4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	4f54300a 	.word	0x4f54300a

08003fb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <USB_CoreReset+0x60>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e01a      	b.n	800400a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	daf3      	bge.n	8003fc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <USB_CoreReset+0x60>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e006      	b.n	800400a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d0f1      	beq.n	8003fec <USB_CoreReset+0x34>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	00030d40 	.word	0x00030d40

0800401c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004028:	201c      	movs	r0, #28
 800402a:	f002 f803 	bl	8006034 <USBD_static_malloc>
 800402e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800403e:	2302      	movs	r3, #2
 8004040:	e038      	b.n	80040b4 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7c1b      	ldrb	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d107      	bne.n	8004062 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2205      	movs	r2, #5
 8004056:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2205      	movs	r2, #5
 800405c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8004060:	e006      	b.n	8004070 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	220a      	movs	r2, #10
 8004066:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	220a      	movs	r2, #10
 800406c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004070:	2302      	movs	r3, #2
 8004072:	2203      	movs	r2, #3
 8004074:	2181      	movs	r1, #129	; 0x81
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f001 fecb 	bl	8005e12 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004082:	2302      	movs	r3, #2
 8004084:	2203      	movs	r2, #3
 8004086:	2101      	movs	r1, #1
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f001 fec2 	bl	8005e12 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	2308      	movs	r3, #8
 80040aa:	2101      	movs	r1, #1
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f001 ff9f 	bl	8005ff0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80040c8:	2181      	movs	r1, #129	; 0x81
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f001 fec7 	bl	8005e5e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80040dc:	2101      	movs	r1, #1
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 febd 	bl	8005e5e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800410e:	4618      	mov	r0, r3
 8004110:	f001 ff9e 	bl	8006050 <USBD_static_free>
    pdev->pClassData = NULL;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004138:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004150:	2303      	movs	r3, #3
 8004152:	e0ed      	b.n	8004330 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800415c:	2b00      	cmp	r3, #0
 800415e:	d052      	beq.n	8004206 <USBD_CUSTOM_HID_Setup+0xde>
 8004160:	2b20      	cmp	r3, #32
 8004162:	f040 80dd 	bne.w	8004320 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	3b02      	subs	r3, #2
 800416c:	2b09      	cmp	r3, #9
 800416e:	d842      	bhi.n	80041f6 <USBD_CUSTOM_HID_Setup+0xce>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <USBD_CUSTOM_HID_Setup+0x50>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041d1 	.word	0x080041d1
 800417c:	080041af 	.word	0x080041af
 8004180:	080041f7 	.word	0x080041f7
 8004184:	080041f7 	.word	0x080041f7
 8004188:	080041f7 	.word	0x080041f7
 800418c:	080041f7 	.word	0x080041f7
 8004190:	080041f7 	.word	0x080041f7
 8004194:	080041e1 	.word	0x080041e1
 8004198:	080041bf 	.word	0x080041bf
 800419c:	080041a1 	.word	0x080041a1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	885b      	ldrh	r3, [r3, #2]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	609a      	str	r2, [r3, #8]
          break;
 80041ac:	e02a      	b.n	8004204 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3308      	adds	r3, #8
 80041b2:	2201      	movs	r2, #1
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f001 fa9b 	bl	80056f2 <USBD_CtlSendData>
          break;
 80041bc:	e022      	b.n	8004204 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	885b      	ldrh	r3, [r3, #2]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	60da      	str	r2, [r3, #12]
          break;
 80041ce:	e019      	b.n	8004204 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	330c      	adds	r3, #12
 80041d4:	2201      	movs	r2, #1
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 fa8a 	bl	80056f2 <USBD_CtlSendData>
          break;
 80041de:	e011      	b.n	8004204 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2201      	movs	r2, #1
 80041e4:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80041e6:	6939      	ldr	r1, [r7, #16]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	88db      	ldrh	r3, [r3, #6]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f001 faab 	bl	800574a <USBD_CtlPrepareRx>
          break;
 80041f4:	e006      	b.n	8004204 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 80041f6:	6839      	ldr	r1, [r7, #0]
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f001 fa09 	bl	8005610 <USBD_CtlError>
          ret = USBD_FAIL;
 80041fe:	2303      	movs	r3, #3
 8004200:	75fb      	strb	r3, [r7, #23]
          break;
 8004202:	bf00      	nop
      }
      break;
 8004204:	e093      	b.n	800432e <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	785b      	ldrb	r3, [r3, #1]
 800420a:	2b0b      	cmp	r3, #11
 800420c:	d87f      	bhi.n	800430e <USBD_CUSTOM_HID_Setup+0x1e6>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <USBD_CUSTOM_HID_Setup+0xec>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004245 	.word	0x08004245
 8004218:	0800431d 	.word	0x0800431d
 800421c:	0800430f 	.word	0x0800430f
 8004220:	0800430f 	.word	0x0800430f
 8004224:	0800430f 	.word	0x0800430f
 8004228:	0800430f 	.word	0x0800430f
 800422c:	0800426f 	.word	0x0800426f
 8004230:	0800430f 	.word	0x0800430f
 8004234:	0800430f 	.word	0x0800430f
 8004238:	0800430f 	.word	0x0800430f
 800423c:	080042bd 	.word	0x080042bd
 8004240:	080042e7 	.word	0x080042e7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b03      	cmp	r3, #3
 800424e:	d107      	bne.n	8004260 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004250:	f107 030e 	add.w	r3, r7, #14
 8004254:	2202      	movs	r2, #2
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f001 fa4a 	bl	80056f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800425e:	e05e      	b.n	800431e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f001 f9d4 	bl	8005610 <USBD_CtlError>
            ret = USBD_FAIL;
 8004268:	2303      	movs	r3, #3
 800426a:	75fb      	strb	r3, [r7, #23]
          break;
 800426c:	e057      	b.n	800431e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	885b      	ldrh	r3, [r3, #2]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b22      	cmp	r3, #34	; 0x22
 8004278:	d10b      	bne.n	8004292 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	88db      	ldrh	r3, [r3, #6]
 800427e:	2b3f      	cmp	r3, #63	; 0x3f
 8004280:	bf28      	it	cs
 8004282:	233f      	movcs	r3, #63	; 0x3f
 8004284:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e00d      	b.n	80042ae <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	885b      	ldrh	r3, [r3, #2]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b21      	cmp	r3, #33	; 0x21
 800429c:	d107      	bne.n	80042ae <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800429e:	4b26      	ldr	r3, [pc, #152]	; (8004338 <USBD_CUSTOM_HID_Setup+0x210>)
 80042a0:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	88db      	ldrh	r3, [r3, #6]
 80042a6:	2b09      	cmp	r3, #9
 80042a8:	bf28      	it	cs
 80042aa:	2309      	movcs	r3, #9
 80042ac:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80042ae:	8bfb      	ldrh	r3, [r7, #30]
 80042b0:	461a      	mov	r2, r3
 80042b2:	69b9      	ldr	r1, [r7, #24]
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 fa1c 	bl	80056f2 <USBD_CtlSendData>
          break;
 80042ba:	e030      	b.n	800431e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d107      	bne.n	80042d8 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	3310      	adds	r3, #16
 80042cc:	2201      	movs	r2, #1
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f001 fa0e 	bl	80056f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042d6:	e022      	b.n	800431e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 f998 	bl	8005610 <USBD_CtlError>
            ret = USBD_FAIL;
 80042e0:	2303      	movs	r3, #3
 80042e2:	75fb      	strb	r3, [r7, #23]
          break;
 80042e4:	e01b      	b.n	800431e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d106      	bne.n	8004300 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	885b      	ldrh	r3, [r3, #2]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042fe:	e00e      	b.n	800431e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 f984 	bl	8005610 <USBD_CtlError>
            ret = USBD_FAIL;
 8004308:	2303      	movs	r3, #3
 800430a:	75fb      	strb	r3, [r7, #23]
          break;
 800430c:	e007      	b.n	800431e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800430e:	6839      	ldr	r1, [r7, #0]
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f001 f97d 	bl	8005610 <USBD_CtlError>
          ret = USBD_FAIL;
 8004316:	2303      	movs	r3, #3
 8004318:	75fb      	strb	r3, [r7, #23]
          break;
 800431a:	e000      	b.n	800431e <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 800431c:	bf00      	nop
      }
      break;
 800431e:	e006      	b.n	800432e <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f001 f974 	bl	8005610 <USBD_CtlError>
      ret = USBD_FAIL;
 8004328:	2303      	movs	r3, #3
 800432a:	75fb      	strb	r3, [r7, #23]
      break;
 800432c:	bf00      	nop
  }
  return (uint8_t)ret;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	200000c8 	.word	0x200000c8

0800433c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004354:	2303      	movs	r3, #3
 8004356:	e01a      	b.n	800438e <USBD_CUSTOM_HID_SendReport+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800435e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b03      	cmp	r3, #3
 800436a:	d10f      	bne.n	800438c <USBD_CUSTOM_HID_SendReport+0x50>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	7e1b      	ldrb	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <USBD_CUSTOM_HID_SendReport+0x4c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2201      	movs	r2, #1
 8004378:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	2181      	movs	r1, #129	; 0x81
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f001 fe14 	bl	8005fae <USBD_LL_Transmit>
 8004386:	e001      	b.n	800438c <USBD_CUSTOM_HID_SendReport+0x50>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <USBD_CUSTOM_HID_SendReport+0x52>
    }
  }
  return (uint8_t)USBD_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2229      	movs	r2, #41	; 0x29
 80043a4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80043a6:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	20000044 	.word	0x20000044

080043b8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2229      	movs	r2, #41	; 0x29
 80043c4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 80043c6:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	20000070 	.word	0x20000070

080043d8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2229      	movs	r2, #41	; 0x29
 80043e4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80043e6:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	2000009c 	.word	0x2000009c

080043f8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800440a:	2200      	movs	r2, #0
 800440c:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004432:	2303      	movs	r3, #3
 8004434:	e00e      	b.n	8004454 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800443c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	7810      	ldrb	r0, [r2, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	7852      	ldrb	r2, [r2, #1]
 800444e:	4611      	mov	r1, r2
 8004450:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 800446e:	2303      	movs	r3, #3
 8004470:	e00a      	b.n	8004488 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004478:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	2308      	movs	r3, #8
 800447e:	2101      	movs	r1, #1
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f001 fdb5 	bl	8005ff0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800449e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e011      	b.n	80044ce <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10c      	bne.n	80044cc <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	7810      	ldrb	r0, [r2, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	7852      	ldrb	r2, [r2, #1]
 80044c2:	4611      	mov	r1, r2
 80044c4:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	220a      	movs	r2, #10
 80044e4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80044e6:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	200000d4 	.word	0x200000d4

080044f8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004508:	2303      	movs	r3, #3
 800450a:	e004      	b.n	8004516 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004536:	2303      	movs	r3, #3
 8004538:	e01f      	b.n	800457a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	79fa      	ldrb	r2, [r7, #7]
 800456c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f001 fbe8 	bl	8005d44 <USBD_LL_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004596:	2303      	movs	r3, #3
 8004598:	e016      	b.n	80045c8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	f107 020e 	add.w	r2, r7, #14
 80045ba:	4610      	mov	r0, r2
 80045bc:	4798      	blx	r3
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f001 fbff 	bl	8005ddc <USBD_LL_Start>
 80045de:	4603      	mov	r3, r0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800460a:	2303      	movs	r3, #3
 800460c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	4611      	mov	r1, r2
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	4798      	blx	r3
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	4611      	mov	r1, r2
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
  }

  return USBD_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004676:	6839      	ldr	r1, [r7, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 ff8f 	bl	800559c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d01a      	beq.n	80046d8 <USBD_LL_SetupStage+0x72>
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d822      	bhi.n	80046ec <USBD_LL_SetupStage+0x86>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <USBD_LL_SetupStage+0x4a>
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d00a      	beq.n	80046c4 <USBD_LL_SetupStage+0x5e>
 80046ae:	e01d      	b.n	80046ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fa61 	bl	8004b80 <USBD_StdDevReq>
 80046be:	4603      	mov	r3, r0
 80046c0:	73fb      	strb	r3, [r7, #15]
      break;
 80046c2:	e020      	b.n	8004706 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fac5 	bl	8004c5c <USBD_StdItfReq>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]
      break;
 80046d6:	e016      	b.n	8004706 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb04 	bl	8004cee <USBD_StdEPReq>
 80046e6:	4603      	mov	r3, r0
 80046e8:	73fb      	strb	r3, [r7, #15]
      break;
 80046ea:	e00c      	b.n	8004706 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80046f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f001 fbce 	bl	8005e9c <USBD_LL_StallEP>
 8004700:	4603      	mov	r3, r0
 8004702:	73fb      	strb	r3, [r7, #15]
      break;
 8004704:	bf00      	nop
  }

  return ret;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	460b      	mov	r3, r1
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800471e:	7afb      	ldrb	r3, [r7, #11]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d138      	bne.n	8004796 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800472a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004732:	2b03      	cmp	r3, #3
 8004734:	d14a      	bne.n	80047cc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d913      	bls.n	800476a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4293      	cmp	r3, r2
 800475a:	bf28      	it	cs
 800475c:	4613      	movcs	r3, r2
 800475e:	461a      	mov	r2, r3
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f001 f80e 	bl	8005784 <USBD_CtlContinueRx>
 8004768:	e030      	b.n	80047cc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b03      	cmp	r3, #3
 8004774:	d10b      	bne.n	800478e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f001 f809 	bl	80057a6 <USBD_CtlSendStatus>
 8004794:	e01a      	b.n	80047cc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d114      	bne.n	80047cc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00e      	beq.n	80047cc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	7afa      	ldrb	r2, [r7, #11]
 80047b8:	4611      	mov	r1, r2
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	4798      	blx	r3
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	e000      	b.n	80047ce <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	460b      	mov	r3, r1
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d16b      	bne.n	80048c2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3314      	adds	r3, #20
 80047ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d156      	bne.n	80048a8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	429a      	cmp	r2, r3
 8004804:	d914      	bls.n	8004830 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	461a      	mov	r2, r3
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 ff83 	bl	8005728 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004822:	2300      	movs	r3, #0
 8004824:	2200      	movs	r2, #0
 8004826:	2100      	movs	r1, #0
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f001 fbe1 	bl	8005ff0 <USBD_LL_PrepareReceive>
 800482e:	e03b      	b.n	80048a8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d11c      	bne.n	8004876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004844:	429a      	cmp	r2, r3
 8004846:	d316      	bcc.n	8004876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004852:	429a      	cmp	r2, r3
 8004854:	d20f      	bcs.n	8004876 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004856:	2200      	movs	r2, #0
 8004858:	2100      	movs	r1, #0
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 ff64 	bl	8005728 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004868:	2300      	movs	r3, #0
 800486a:	2200      	movs	r2, #0
 800486c:	2100      	movs	r1, #0
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f001 fbbe 	bl	8005ff0 <USBD_LL_PrepareReceive>
 8004874:	e018      	b.n	80048a8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b03      	cmp	r3, #3
 8004880:	d10b      	bne.n	800489a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f001 fafd 	bl	8005e9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 ff92 	bl	80057cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d122      	bne.n	80048f8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fe98 	bl	80045e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80048c0:	e01a      	b.n	80048f8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d114      	bne.n	80048f8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	7afa      	ldrb	r2, [r7, #11]
 80048e4:	4611      	mov	r1, r2
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	4798      	blx	r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	e000      	b.n	80048fa <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004932:	2303      	movs	r3, #3
 8004934:	e02f      	b.n	8004996 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00f      	beq.n	8004960 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6852      	ldr	r2, [r2, #4]
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	4611      	mov	r1, r2
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	2200      	movs	r2, #0
 8004964:	2100      	movs	r1, #0
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fa53 	bl	8005e12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2240      	movs	r2, #64	; 0x40
 8004978:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	2200      	movs	r2, #0
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 fa45 	bl	8005e12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2240      	movs	r2, #64	; 0x40
 8004992:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2204      	movs	r2, #4
 80049d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d106      	bne.n	8004a0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e012      	b.n	8004a56 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d10b      	bne.n	8004a54 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e014      	b.n	8004aa2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d10d      	bne.n	8004aa0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e014      	b.n	8004aee <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d10d      	bne.n	8004aec <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6852      	ldr	r2, [r2, #4]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	4611      	mov	r1, r2
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
  }

  return USBD_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004b62:	8a3b      	ldrh	r3, [r7, #16]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	b21a      	sxth	r2, r3
 8004b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004b72:	89fb      	ldrh	r3, [r7, #14]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d005      	beq.n	8004ba6 <USBD_StdDevReq+0x26>
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d853      	bhi.n	8004c46 <USBD_StdDevReq+0xc6>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <USBD_StdDevReq+0x3a>
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d14f      	bne.n	8004c46 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb8:	e04a      	b.n	8004c50 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	d83b      	bhi.n	8004c3a <USBD_StdDevReq+0xba>
 8004bc2:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <USBD_StdDevReq+0x48>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004c3b 	.word	0x08004c3b
 8004bd4:	08004c27 	.word	0x08004c27
 8004bd8:	08004c3b 	.word	0x08004c3b
 8004bdc:	08004bfb 	.word	0x08004bfb
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004c3b 	.word	0x08004c3b
 8004be8:	08004c13 	.word	0x08004c13
 8004bec:	08004c05 	.word	0x08004c05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f9de 	bl	8004fb4 <USBD_GetDescriptor>
          break;
 8004bf8:	e024      	b.n	8004c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb43 	bl	8005288 <USBD_SetAddress>
          break;
 8004c02:	e01f      	b.n	8004c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004c04:	6839      	ldr	r1, [r7, #0]
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fb82 	bl	8005310 <USBD_SetConfig>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
          break;
 8004c10:	e018      	b.n	8004c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fc21 	bl	800545c <USBD_GetConfig>
          break;
 8004c1a:	e013      	b.n	8004c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fc52 	bl	80054c8 <USBD_GetStatus>
          break;
 8004c24:	e00e      	b.n	8004c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004c26:	6839      	ldr	r1, [r7, #0]
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fc81 	bl	8005530 <USBD_SetFeature>
          break;
 8004c2e:	e009      	b.n	8004c44 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fc90 	bl	8005558 <USBD_ClrFeature>
          break;
 8004c38:	e004      	b.n	8004c44 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fce7 	bl	8005610 <USBD_CtlError>
          break;
 8004c42:	bf00      	nop
      }
      break;
 8004c44:	e004      	b.n	8004c50 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fce1 	bl	8005610 <USBD_CtlError>
      break;
 8004c4e:	bf00      	nop
  }

  return ret;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop

08004c5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d005      	beq.n	8004c82 <USBD_StdItfReq+0x26>
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d82f      	bhi.n	8004cda <USBD_StdItfReq+0x7e>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <USBD_StdItfReq+0x26>
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d12b      	bne.n	8004cda <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d81d      	bhi.n	8004ccc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	889b      	ldrh	r3, [r3, #4]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d813      	bhi.n	8004cc2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	6839      	ldr	r1, [r7, #0]
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	88db      	ldrh	r3, [r3, #6]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d110      	bne.n	8004cd6 <USBD_StdItfReq+0x7a>
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10d      	bne.n	8004cd6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fd73 	bl	80057a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004cc0:	e009      	b.n	8004cd6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004cc2:	6839      	ldr	r1, [r7, #0]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fca3 	bl	8005610 <USBD_CtlError>
          break;
 8004cca:	e004      	b.n	8004cd6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fc9e 	bl	8005610 <USBD_CtlError>
          break;
 8004cd4:	e000      	b.n	8004cd8 <USBD_StdItfReq+0x7c>
          break;
 8004cd6:	bf00      	nop
      }
      break;
 8004cd8:	e004      	b.n	8004ce4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fc97 	bl	8005610 <USBD_CtlError>
      break;
 8004ce2:	bf00      	nop
  }

  return ret;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	889b      	ldrh	r3, [r3, #4]
 8004d00:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d007      	beq.n	8004d1e <USBD_StdEPReq+0x30>
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	f200 8145 	bhi.w	8004f9e <USBD_StdEPReq+0x2b0>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00c      	beq.n	8004d32 <USBD_StdEPReq+0x44>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	f040 8140 	bne.w	8004f9e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d30:	e13a      	b.n	8004fa8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d007      	beq.n	8004d4a <USBD_StdEPReq+0x5c>
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	f300 8129 	bgt.w	8004f92 <USBD_StdEPReq+0x2a4>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d07f      	beq.n	8004e44 <USBD_StdEPReq+0x156>
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d03c      	beq.n	8004dc2 <USBD_StdEPReq+0xd4>
 8004d48:	e123      	b.n	8004f92 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d002      	beq.n	8004d5c <USBD_StdEPReq+0x6e>
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d016      	beq.n	8004d88 <USBD_StdEPReq+0x9a>
 8004d5a:	e02c      	b.n	8004db6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d5c:	7bbb      	ldrb	r3, [r7, #14]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <USBD_StdEPReq+0x90>
 8004d62:	7bbb      	ldrb	r3, [r7, #14]
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d00a      	beq.n	8004d7e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 f895 	bl	8005e9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 f891 	bl	8005e9c <USBD_LL_StallEP>
 8004d7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004d7c:	e020      	b.n	8004dc0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fc45 	bl	8005610 <USBD_CtlError>
              break;
 8004d86:	e01b      	b.n	8004dc0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	885b      	ldrh	r3, [r3, #2]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10e      	bne.n	8004dae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004d90:	7bbb      	ldrb	r3, [r7, #14]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <USBD_StdEPReq+0xc0>
 8004d96:	7bbb      	ldrb	r3, [r7, #14]
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d008      	beq.n	8004dae <USBD_StdEPReq+0xc0>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	88db      	ldrh	r3, [r3, #6]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 f877 	bl	8005e9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fcf9 	bl	80057a6 <USBD_CtlSendStatus>

              break;
 8004db4:	e004      	b.n	8004dc0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fc29 	bl	8005610 <USBD_CtlError>
              break;
 8004dbe:	bf00      	nop
          }
          break;
 8004dc0:	e0ec      	b.n	8004f9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d002      	beq.n	8004dd4 <USBD_StdEPReq+0xe6>
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d016      	beq.n	8004e00 <USBD_StdEPReq+0x112>
 8004dd2:	e030      	b.n	8004e36 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00d      	beq.n	8004df6 <USBD_StdEPReq+0x108>
 8004dda:	7bbb      	ldrb	r3, [r7, #14]
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d00a      	beq.n	8004df6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004de0:	7bbb      	ldrb	r3, [r7, #14]
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 f859 	bl	8005e9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f001 f855 	bl	8005e9c <USBD_LL_StallEP>
 8004df2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004df4:	e025      	b.n	8004e42 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fc09 	bl	8005610 <USBD_CtlError>
              break;
 8004dfe:	e020      	b.n	8004e42 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	885b      	ldrh	r3, [r3, #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11b      	bne.n	8004e40 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004e08:	7bbb      	ldrb	r3, [r7, #14]
 8004e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004e12:	7bbb      	ldrb	r3, [r7, #14]
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f001 f85f 	bl	8005eda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fcc2 	bl	80057a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004e34:	e004      	b.n	8004e40 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fbe9 	bl	8005610 <USBD_CtlError>
              break;
 8004e3e:	e000      	b.n	8004e42 <USBD_StdEPReq+0x154>
              break;
 8004e40:	bf00      	nop
          }
          break;
 8004e42:	e0ab      	b.n	8004f9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d002      	beq.n	8004e56 <USBD_StdEPReq+0x168>
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d032      	beq.n	8004eba <USBD_StdEPReq+0x1cc>
 8004e54:	e097      	b.n	8004f86 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e56:	7bbb      	ldrb	r3, [r7, #14]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <USBD_StdEPReq+0x17e>
 8004e5c:	7bbb      	ldrb	r3, [r7, #14]
 8004e5e:	2b80      	cmp	r3, #128	; 0x80
 8004e60:	d004      	beq.n	8004e6c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004e62:	6839      	ldr	r1, [r7, #0]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fbd3 	bl	8005610 <USBD_CtlError>
                break;
 8004e6a:	e091      	b.n	8004f90 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da0b      	bge.n	8004e8c <USBD_StdEPReq+0x19e>
 8004e74:	7bbb      	ldrb	r3, [r7, #14]
 8004e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	3310      	adds	r3, #16
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	3304      	adds	r3, #4
 8004e8a:	e00b      	b.n	8004ea4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004e8c:	7bbb      	ldrb	r3, [r7, #14]
 8004e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fc1d 	bl	80056f2 <USBD_CtlSendData>
              break;
 8004eb8:	e06a      	b.n	8004f90 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da11      	bge.n	8004ee6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004ec2:	7bbb      	ldrb	r3, [r7, #14]
 8004ec4:	f003 020f 	and.w	r2, r3, #15
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3324      	adds	r3, #36	; 0x24
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d117      	bne.n	8004f0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fb96 	bl	8005610 <USBD_CtlError>
                  break;
 8004ee4:	e054      	b.n	8004f90 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004ee6:	7bbb      	ldrb	r3, [r7, #14]
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d104      	bne.n	8004f0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004f02:	6839      	ldr	r1, [r7, #0]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fb83 	bl	8005610 <USBD_CtlError>
                  break;
 8004f0a:	e041      	b.n	8004f90 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	da0b      	bge.n	8004f2c <USBD_StdEPReq+0x23e>
 8004f14:	7bbb      	ldrb	r3, [r7, #14]
 8004f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	3310      	adds	r3, #16
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4413      	add	r3, r2
 8004f28:	3304      	adds	r3, #4
 8004f2a:	e00b      	b.n	8004f44 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4413      	add	r3, r2
 8004f42:	3304      	adds	r3, #4
 8004f44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004f46:	7bbb      	ldrb	r3, [r7, #14]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <USBD_StdEPReq+0x264>
 8004f4c:	7bbb      	ldrb	r3, [r7, #14]
 8004f4e:	2b80      	cmp	r3, #128	; 0x80
 8004f50:	d103      	bne.n	8004f5a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e00e      	b.n	8004f78 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004f5a:	7bbb      	ldrb	r3, [r7, #14]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 ffda 	bl	8005f18 <USBD_LL_IsStallEP>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e002      	b.n	8004f78 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fbb7 	bl	80056f2 <USBD_CtlSendData>
              break;
 8004f84:	e004      	b.n	8004f90 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fb41 	bl	8005610 <USBD_CtlError>
              break;
 8004f8e:	bf00      	nop
          }
          break;
 8004f90:	e004      	b.n	8004f9c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8004f92:	6839      	ldr	r1, [r7, #0]
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb3b 	bl	8005610 <USBD_CtlError>
          break;
 8004f9a:	bf00      	nop
      }
      break;
 8004f9c:	e004      	b.n	8004fa8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fb35 	bl	8005610 <USBD_CtlError>
      break;
 8004fa6:	bf00      	nop
  }

  return ret;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	885b      	ldrh	r3, [r3, #2]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	f200 8128 	bhi.w	800522a <USBD_GetDescriptor+0x276>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <USBD_GetDescriptor+0x2c>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ffd 	.word	0x08004ffd
 8004fe4:	08005015 	.word	0x08005015
 8004fe8:	08005055 	.word	0x08005055
 8004fec:	0800522b 	.word	0x0800522b
 8004ff0:	0800522b 	.word	0x0800522b
 8004ff4:	080051cb 	.word	0x080051cb
 8004ff8:	080051f7 	.word	0x080051f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	7c12      	ldrb	r2, [r2, #16]
 8005008:	f107 0108 	add.w	r1, r7, #8
 800500c:	4610      	mov	r0, r2
 800500e:	4798      	blx	r3
 8005010:	60f8      	str	r0, [r7, #12]
      break;
 8005012:	e112      	b.n	800523a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7c1b      	ldrb	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10d      	bne.n	8005038 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	f107 0208 	add.w	r2, r7, #8
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
 800502c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	2202      	movs	r2, #2
 8005034:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005036:	e100      	b.n	800523a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	f107 0208 	add.w	r2, r7, #8
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3
 8005048:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	2202      	movs	r2, #2
 8005050:	701a      	strb	r2, [r3, #0]
      break;
 8005052:	e0f2      	b.n	800523a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	885b      	ldrh	r3, [r3, #2]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b05      	cmp	r3, #5
 800505c:	f200 80ac 	bhi.w	80051b8 <USBD_GetDescriptor+0x204>
 8005060:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <USBD_GetDescriptor+0xb4>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	08005081 	.word	0x08005081
 800506c:	080050b5 	.word	0x080050b5
 8005070:	080050e9 	.word	0x080050e9
 8005074:	0800511d 	.word	0x0800511d
 8005078:	08005151 	.word	0x08005151
 800507c:	08005185 	.word	0x08005185
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	7c12      	ldrb	r2, [r2, #16]
 8005098:	f107 0108 	add.w	r1, r7, #8
 800509c:	4610      	mov	r0, r2
 800509e:	4798      	blx	r3
 80050a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050a2:	e091      	b.n	80051c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fab2 	bl	8005610 <USBD_CtlError>
            err++;
 80050ac:	7afb      	ldrb	r3, [r7, #11]
 80050ae:	3301      	adds	r3, #1
 80050b0:	72fb      	strb	r3, [r7, #11]
          break;
 80050b2:	e089      	b.n	80051c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	7c12      	ldrb	r2, [r2, #16]
 80050cc:	f107 0108 	add.w	r1, r7, #8
 80050d0:	4610      	mov	r0, r2
 80050d2:	4798      	blx	r3
 80050d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050d6:	e077      	b.n	80051c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa98 	bl	8005610 <USBD_CtlError>
            err++;
 80050e0:	7afb      	ldrb	r3, [r7, #11]
 80050e2:	3301      	adds	r3, #1
 80050e4:	72fb      	strb	r3, [r7, #11]
          break;
 80050e6:	e06f      	b.n	80051c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	7c12      	ldrb	r2, [r2, #16]
 8005100:	f107 0108 	add.w	r1, r7, #8
 8005104:	4610      	mov	r0, r2
 8005106:	4798      	blx	r3
 8005108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800510a:	e05d      	b.n	80051c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fa7e 	bl	8005610 <USBD_CtlError>
            err++;
 8005114:	7afb      	ldrb	r3, [r7, #11]
 8005116:	3301      	adds	r3, #1
 8005118:	72fb      	strb	r3, [r7, #11]
          break;
 800511a:	e055      	b.n	80051c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00b      	beq.n	8005140 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	7c12      	ldrb	r2, [r2, #16]
 8005134:	f107 0108 	add.w	r1, r7, #8
 8005138:	4610      	mov	r0, r2
 800513a:	4798      	blx	r3
 800513c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800513e:	e043      	b.n	80051c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa64 	bl	8005610 <USBD_CtlError>
            err++;
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	3301      	adds	r3, #1
 800514c:	72fb      	strb	r3, [r7, #11]
          break;
 800514e:	e03b      	b.n	80051c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	7c12      	ldrb	r2, [r2, #16]
 8005168:	f107 0108 	add.w	r1, r7, #8
 800516c:	4610      	mov	r0, r2
 800516e:	4798      	blx	r3
 8005170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005172:	e029      	b.n	80051c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa4a 	bl	8005610 <USBD_CtlError>
            err++;
 800517c:	7afb      	ldrb	r3, [r7, #11]
 800517e:	3301      	adds	r3, #1
 8005180:	72fb      	strb	r3, [r7, #11]
          break;
 8005182:	e021      	b.n	80051c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	7c12      	ldrb	r2, [r2, #16]
 800519c:	f107 0108 	add.w	r1, r7, #8
 80051a0:	4610      	mov	r0, r2
 80051a2:	4798      	blx	r3
 80051a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051a6:	e00f      	b.n	80051c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa30 	bl	8005610 <USBD_CtlError>
            err++;
 80051b0:	7afb      	ldrb	r3, [r7, #11]
 80051b2:	3301      	adds	r3, #1
 80051b4:	72fb      	strb	r3, [r7, #11]
          break;
 80051b6:	e007      	b.n	80051c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa28 	bl	8005610 <USBD_CtlError>
          err++;
 80051c0:	7afb      	ldrb	r3, [r7, #11]
 80051c2:	3301      	adds	r3, #1
 80051c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80051c6:	bf00      	nop
      }
      break;
 80051c8:	e037      	b.n	800523a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7c1b      	ldrb	r3, [r3, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	f107 0208 	add.w	r2, r7, #8
 80051de:	4610      	mov	r0, r2
 80051e0:	4798      	blx	r3
 80051e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051e4:	e029      	b.n	800523a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fa11 	bl	8005610 <USBD_CtlError>
        err++;
 80051ee:	7afb      	ldrb	r3, [r7, #11]
 80051f0:	3301      	adds	r3, #1
 80051f2:	72fb      	strb	r3, [r7, #11]
      break;
 80051f4:	e021      	b.n	800523a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	7c1b      	ldrb	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10d      	bne.n	800521a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	f107 0208 	add.w	r2, r7, #8
 800520a:	4610      	mov	r0, r2
 800520c:	4798      	blx	r3
 800520e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	2207      	movs	r2, #7
 8005216:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005218:	e00f      	b.n	800523a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f9f7 	bl	8005610 <USBD_CtlError>
        err++;
 8005222:	7afb      	ldrb	r3, [r7, #11]
 8005224:	3301      	adds	r3, #1
 8005226:	72fb      	strb	r3, [r7, #11]
      break;
 8005228:	e007      	b.n	800523a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9ef 	bl	8005610 <USBD_CtlError>
      err++;
 8005232:	7afb      	ldrb	r3, [r7, #11]
 8005234:	3301      	adds	r3, #1
 8005236:	72fb      	strb	r3, [r7, #11]
      break;
 8005238:	bf00      	nop
  }

  if (err != 0U)
 800523a:	7afb      	ldrb	r3, [r7, #11]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11e      	bne.n	800527e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	88db      	ldrh	r3, [r3, #6]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d016      	beq.n	8005276 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005248:	893b      	ldrh	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00e      	beq.n	800526c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	88da      	ldrh	r2, [r3, #6]
 8005252:	893b      	ldrh	r3, [r7, #8]
 8005254:	4293      	cmp	r3, r2
 8005256:	bf28      	it	cs
 8005258:	4613      	movcs	r3, r2
 800525a:	b29b      	uxth	r3, r3
 800525c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800525e:	893b      	ldrh	r3, [r7, #8]
 8005260:	461a      	mov	r2, r3
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa44 	bl	80056f2 <USBD_CtlSendData>
 800526a:	e009      	b.n	8005280 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9ce 	bl	8005610 <USBD_CtlError>
 8005274:	e004      	b.n	8005280 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa95 	bl	80057a6 <USBD_CtlSendStatus>
 800527c:	e000      	b.n	8005280 <USBD_GetDescriptor+0x2cc>
    return;
 800527e:	bf00      	nop
  }
}
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop

08005288 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	889b      	ldrh	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d131      	bne.n	80052fe <USBD_SetAddress+0x76>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	88db      	ldrh	r3, [r3, #6]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d12d      	bne.n	80052fe <USBD_SetAddress+0x76>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	885b      	ldrh	r3, [r3, #2]
 80052a6:	2b7f      	cmp	r3, #127	; 0x7f
 80052a8:	d829      	bhi.n	80052fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	885b      	ldrh	r3, [r3, #2]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d104      	bne.n	80052cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f9a3 	bl	8005610 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ca:	e01d      	b.n	8005308 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fe49 	bl	8005f70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa61 	bl	80057a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052f2:	e009      	b.n	8005308 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052fc:	e004      	b.n	8005308 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f985 	bl	8005610 <USBD_CtlError>
  }
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	885b      	ldrh	r3, [r3, #2]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	4b4c      	ldr	r3, [pc, #304]	; (8005458 <USBD_SetConfig+0x148>)
 8005326:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005328:	4b4b      	ldr	r3, [pc, #300]	; (8005458 <USBD_SetConfig+0x148>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d905      	bls.n	800533c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f96c 	bl	8005610 <USBD_CtlError>
    return USBD_FAIL;
 8005338:	2303      	movs	r3, #3
 800533a:	e088      	b.n	800544e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d002      	beq.n	800534e <USBD_SetConfig+0x3e>
 8005348:	2b03      	cmp	r3, #3
 800534a:	d025      	beq.n	8005398 <USBD_SetConfig+0x88>
 800534c:	e071      	b.n	8005432 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800534e:	4b42      	ldr	r3, [pc, #264]	; (8005458 <USBD_SetConfig+0x148>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01c      	beq.n	8005390 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005356:	4b40      	ldr	r3, [pc, #256]	; (8005458 <USBD_SetConfig+0x148>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005360:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <USBD_SetConfig+0x148>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff f949 	bl	80045fe <USBD_SetClassConfig>
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f949 	bl	8005610 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800537e:	e065      	b.n	800544c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fa10 	bl	80057a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2203      	movs	r2, #3
 800538a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800538e:	e05d      	b.n	800544c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fa08 	bl	80057a6 <USBD_CtlSendStatus>
      break;
 8005396:	e059      	b.n	800544c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005398:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <USBD_SetConfig+0x148>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d112      	bne.n	80053c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80053a8:	4b2b      	ldr	r3, [pc, #172]	; (8005458 <USBD_SetConfig+0x148>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80053b2:	4b29      	ldr	r3, [pc, #164]	; (8005458 <USBD_SetConfig+0x148>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff f93c 	bl	8004636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9f1 	bl	80057a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80053c4:	e042      	b.n	800544c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <USBD_SetConfig+0x148>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d02a      	beq.n	800542a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff f92a 	bl	8004636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80053e2:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <USBD_SetConfig+0x148>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80053ec:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <USBD_SetConfig+0x148>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff f903 	bl	80045fe <USBD_SetClassConfig>
 80053f8:	4603      	mov	r3, r0
 80053fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00f      	beq.n	8005422 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f903 	bl	8005610 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff f90f 	bl	8004636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005420:	e014      	b.n	800544c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f9bf 	bl	80057a6 <USBD_CtlSendStatus>
      break;
 8005428:	e010      	b.n	800544c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9bb 	bl	80057a6 <USBD_CtlSendStatus>
      break;
 8005430:	e00c      	b.n	800544c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8eb 	bl	8005610 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <USBD_SetConfig+0x148>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff f8f8 	bl	8004636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005446:	2303      	movs	r3, #3
 8005448:	73fb      	strb	r3, [r7, #15]
      break;
 800544a:	bf00      	nop
  }

  return ret;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2000019c 	.word	0x2000019c

0800545c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	88db      	ldrh	r3, [r3, #6]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d004      	beq.n	8005478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8cd 	bl	8005610 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005476:	e023      	b.n	80054c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	dc02      	bgt.n	800548a <USBD_GetConfig+0x2e>
 8005484:	2b00      	cmp	r3, #0
 8005486:	dc03      	bgt.n	8005490 <USBD_GetConfig+0x34>
 8005488:	e015      	b.n	80054b6 <USBD_GetConfig+0x5a>
 800548a:	2b03      	cmp	r3, #3
 800548c:	d00b      	beq.n	80054a6 <USBD_GetConfig+0x4a>
 800548e:	e012      	b.n	80054b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3308      	adds	r3, #8
 800549a:	2201      	movs	r2, #1
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f927 	bl	80056f2 <USBD_CtlSendData>
        break;
 80054a4:	e00c      	b.n	80054c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3304      	adds	r3, #4
 80054aa:	2201      	movs	r2, #1
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f91f 	bl	80056f2 <USBD_CtlSendData>
        break;
 80054b4:	e004      	b.n	80054c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f8a9 	bl	8005610 <USBD_CtlError>
        break;
 80054be:	bf00      	nop
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d81e      	bhi.n	800551e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	88db      	ldrh	r3, [r3, #6]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d004      	beq.n	80054f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f890 	bl	8005610 <USBD_CtlError>
        break;
 80054f0:	e01a      	b.n	8005528 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f043 0202 	orr.w	r2, r3, #2
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	330c      	adds	r3, #12
 8005512:	2202      	movs	r2, #2
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8eb 	bl	80056f2 <USBD_CtlSendData>
      break;
 800551c:	e004      	b.n	8005528 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f875 	bl	8005610 <USBD_CtlError>
      break;
 8005526:	bf00      	nop
  }
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	885b      	ldrh	r3, [r3, #2]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d106      	bne.n	8005550 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f92b 	bl	80057a6 <USBD_CtlSendStatus>
  }
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005568:	b2db      	uxtb	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	2b02      	cmp	r3, #2
 800556e:	d80b      	bhi.n	8005588 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	885b      	ldrh	r3, [r3, #2]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10c      	bne.n	8005592 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f910 	bl	80057a6 <USBD_CtlSendStatus>
      }
      break;
 8005586:	e004      	b.n	8005592 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f840 	bl	8005610 <USBD_CtlError>
      break;
 8005590:	e000      	b.n	8005594 <USBD_ClrFeature+0x3c>
      break;
 8005592:	bf00      	nop
  }
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	781a      	ldrb	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff fabc 	bl	8004b44 <SWAPBYTE>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3301      	adds	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff faaf 	bl	8004b44 <SWAPBYTE>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff faa2 	bl	8004b44 <SWAPBYTE>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	80da      	strh	r2, [r3, #6]
}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800561a:	2180      	movs	r1, #128	; 0x80
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fc3d 	bl	8005e9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005622:	2100      	movs	r1, #0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fc39 	bl	8005e9c <USBD_LL_StallEP>
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d036      	beq.n	80056b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800564c:	6938      	ldr	r0, [r7, #16]
 800564e:	f000 f836 	bl	80056be <USBD_GetLen>
 8005652:	4603      	mov	r3, r0
 8005654:	3301      	adds	r3, #1
 8005656:	b29b      	uxth	r3, r3
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4413      	add	r3, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	701a      	strb	r2, [r3, #0]
  idx++;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	3301      	adds	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	4413      	add	r3, r2
 8005678:	2203      	movs	r2, #3
 800567a:	701a      	strb	r2, [r3, #0]
  idx++;
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	3301      	adds	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005682:	e013      	b.n	80056ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4413      	add	r3, r2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	3301      	adds	r3, #1
 8005694:	613b      	str	r3, [r7, #16]
    idx++;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	3301      	adds	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	4413      	add	r3, r2
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
 80056a8:	3301      	adds	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e7      	bne.n	8005684 <USBD_GetString+0x52>
 80056b4:	e000      	b.n	80056b8 <USBD_GetString+0x86>
    return;
 80056b6:	bf00      	nop
  }
}
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80056ce:	e005      	b.n	80056dc <USBD_GetLen+0x1e>
  {
    len++;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	3301      	adds	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	3301      	adds	r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f5      	bne.n	80056d0 <USBD_GetLen+0x12>
  }

  return len;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2202      	movs	r2, #2
 8005702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	2100      	movs	r1, #0
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fc48 	bl	8005fae <USBD_LL_Transmit>

  return USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	2100      	movs	r1, #0
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fc37 	bl	8005fae <USBD_LL_Transmit>

  return USBD_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2203      	movs	r2, #3
 800575a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	2100      	movs	r1, #0
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fc3b 	bl	8005ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	2100      	movs	r1, #0
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fc2a 	bl	8005ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2204      	movs	r2, #4
 80057b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80057b6:	2300      	movs	r3, #0
 80057b8:	2200      	movs	r2, #0
 80057ba:	2100      	movs	r1, #0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fbf6 	bl	8005fae <USBD_LL_Transmit>

  return USBD_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2205      	movs	r2, #5
 80057d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057dc:	2300      	movs	r3, #0
 80057de:	2200      	movs	r2, #0
 80057e0:	2100      	movs	r1, #0
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fc04 	bl	8005ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80057f8:	2200      	movs	r2, #0
 80057fa:	4912      	ldr	r1, [pc, #72]	; (8005844 <MX_USB_DEVICE_Init+0x50>)
 80057fc:	4812      	ldr	r0, [pc, #72]	; (8005848 <MX_USB_DEVICE_Init+0x54>)
 80057fe:	f7fe fe90 	bl	8004522 <USBD_Init>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005808:	f7fa ff0c 	bl	8000624 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800580c:	490f      	ldr	r1, [pc, #60]	; (800584c <MX_USB_DEVICE_Init+0x58>)
 800580e:	480e      	ldr	r0, [pc, #56]	; (8005848 <MX_USB_DEVICE_Init+0x54>)
 8005810:	f7fe feb7 	bl	8004582 <USBD_RegisterClass>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800581a:	f7fa ff03 	bl	8000624 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800581e:	490c      	ldr	r1, [pc, #48]	; (8005850 <MX_USB_DEVICE_Init+0x5c>)
 8005820:	4809      	ldr	r0, [pc, #36]	; (8005848 <MX_USB_DEVICE_Init+0x54>)
 8005822:	f7fe fe69 	bl	80044f8 <USBD_CUSTOM_HID_RegisterInterface>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800582c:	f7fa fefa 	bl	8000624 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005830:	4805      	ldr	r0, [pc, #20]	; (8005848 <MX_USB_DEVICE_Init+0x54>)
 8005832:	f7fe fecd 	bl	80045d0 <USBD_Start>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800583c:	f7fa fef2 	bl	8000624 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005840:	bf00      	nop
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000130 	.word	0x20000130
 8005848:	200001cc 	.word	0x200001cc
 800584c:	2000000c 	.word	0x2000000c
 8005850:	20000120 	.word	0x20000120

08005854 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005858:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800585a:	4618      	mov	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005868:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800586a:	4618      	mov	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	460a      	mov	r2, r1
 800587e:	71fb      	strb	r3, [r7, #7]
 8005880:	4613      	mov	r3, r2
 8005882:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8005884:	4803      	ldr	r0, [pc, #12]	; (8005894 <CUSTOM_HID_OutEvent_FS+0x20>)
 8005886:	f7fe fde9 	bl	800445c <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800588a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200001cc 	.word	0x200001cc

08005898 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2212      	movs	r2, #18
 80058a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80058aa:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	2000014c 	.word	0x2000014c

080058bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2204      	movs	r2, #4
 80058cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80058ce:	4b03      	ldr	r3, [pc, #12]	; (80058dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20000160 	.word	0x20000160

080058e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	6039      	str	r1, [r7, #0]
 80058ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d105      	bne.n	80058fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	4907      	ldr	r1, [pc, #28]	; (8005914 <USBD_FS_ProductStrDescriptor+0x34>)
 80058f6:	4808      	ldr	r0, [pc, #32]	; (8005918 <USBD_FS_ProductStrDescriptor+0x38>)
 80058f8:	f7ff fe9b 	bl	8005632 <USBD_GetString>
 80058fc:	e004      	b.n	8005908 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	4904      	ldr	r1, [pc, #16]	; (8005914 <USBD_FS_ProductStrDescriptor+0x34>)
 8005902:	4805      	ldr	r0, [pc, #20]	; (8005918 <USBD_FS_ProductStrDescriptor+0x38>)
 8005904:	f7ff fe95 	bl	8005632 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005908:	4b02      	ldr	r3, [pc, #8]	; (8005914 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	2000049c 	.word	0x2000049c
 8005918:	08006368 	.word	0x08006368

0800591c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	6039      	str	r1, [r7, #0]
 8005926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	4904      	ldr	r1, [pc, #16]	; (800593c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800592c:	4804      	ldr	r0, [pc, #16]	; (8005940 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800592e:	f7ff fe80 	bl	8005632 <USBD_GetString>
  return USBD_StrDesc;
 8005932:	4b02      	ldr	r3, [pc, #8]	; (800593c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	2000049c 	.word	0x2000049c
 8005940:	08006388 	.word	0x08006388

08005944 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	6039      	str	r1, [r7, #0]
 800594e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	221a      	movs	r2, #26
 8005954:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005956:	f000 f843 	bl	80059e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800595a:	4b02      	ldr	r3, [pc, #8]	; (8005964 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000164 	.word	0x20000164

08005968 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	6039      	str	r1, [r7, #0]
 8005972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	4907      	ldr	r1, [pc, #28]	; (800599c <USBD_FS_ConfigStrDescriptor+0x34>)
 800597e:	4808      	ldr	r0, [pc, #32]	; (80059a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005980:	f7ff fe57 	bl	8005632 <USBD_GetString>
 8005984:	e004      	b.n	8005990 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	4904      	ldr	r1, [pc, #16]	; (800599c <USBD_FS_ConfigStrDescriptor+0x34>)
 800598a:	4805      	ldr	r0, [pc, #20]	; (80059a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800598c:	f7ff fe51 	bl	8005632 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	2000049c 	.word	0x2000049c
 80059a0:	0800639c 	.word	0x0800639c

080059a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	6039      	str	r1, [r7, #0]
 80059ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	4907      	ldr	r1, [pc, #28]	; (80059d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80059ba:	4808      	ldr	r0, [pc, #32]	; (80059dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80059bc:	f7ff fe39 	bl	8005632 <USBD_GetString>
 80059c0:	e004      	b.n	80059cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	4904      	ldr	r1, [pc, #16]	; (80059d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80059c6:	4805      	ldr	r0, [pc, #20]	; (80059dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80059c8:	f7ff fe33 	bl	8005632 <USBD_GetString>
  }
  return USBD_StrDesc;
 80059cc:	4b02      	ldr	r3, [pc, #8]	; (80059d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	2000049c 	.word	0x2000049c
 80059dc:	080063b0 	.word	0x080063b0

080059e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80059e6:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <Get_SerialNum+0x44>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80059ec:	4b0e      	ldr	r3, [pc, #56]	; (8005a28 <Get_SerialNum+0x48>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <Get_SerialNum+0x4c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005a06:	2208      	movs	r2, #8
 8005a08:	4909      	ldr	r1, [pc, #36]	; (8005a30 <Get_SerialNum+0x50>)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f814 	bl	8005a38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005a10:	2204      	movs	r2, #4
 8005a12:	4908      	ldr	r1, [pc, #32]	; (8005a34 <Get_SerialNum+0x54>)
 8005a14:	68b8      	ldr	r0, [r7, #8]
 8005a16:	f000 f80f 	bl	8005a38 <IntToUnicode>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	1fff7a10 	.word	0x1fff7a10
 8005a28:	1fff7a14 	.word	0x1fff7a14
 8005a2c:	1fff7a18 	.word	0x1fff7a18
 8005a30:	20000166 	.word	0x20000166
 8005a34:	20000176 	.word	0x20000176

08005a38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75fb      	strb	r3, [r7, #23]
 8005a4e:	e027      	b.n	8005aa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	0f1b      	lsrs	r3, r3, #28
 8005a54:	2b09      	cmp	r3, #9
 8005a56:	d80b      	bhi.n	8005a70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	0f1b      	lsrs	r3, r3, #28
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4619      	mov	r1, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	440b      	add	r3, r1
 8005a68:	3230      	adds	r2, #48	; 0x30
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	e00a      	b.n	8005a86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	0f1b      	lsrs	r3, r3, #28
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	440b      	add	r3, r1
 8005a80:	3237      	adds	r2, #55	; 0x37
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	3301      	adds	r3, #1
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4413      	add	r3, r2
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
 8005aa0:	7dfa      	ldrb	r2, [r7, #23]
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d3d3      	bcc.n	8005a50 <IntToUnicode+0x18>
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	609a      	str	r2, [r3, #8]
 8005acc:	60da      	str	r2, [r3, #12]
 8005ace:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ad8:	d13a      	bne.n	8005b50 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <HAL_PCD_MspInit+0xa0>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <HAL_PCD_MspInit+0xa0>)
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <HAL_PCD_MspInit+0xa0>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005af6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005afc:	2302      	movs	r3, #2
 8005afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b04:	2303      	movs	r3, #3
 8005b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005b08:	230a      	movs	r3, #10
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	4619      	mov	r1, r3
 8005b12:	4812      	ldr	r0, [pc, #72]	; (8005b5c <HAL_PCD_MspInit+0xa4>)
 8005b14:	f7fa ffcc 	bl	8000ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005b18:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <HAL_PCD_MspInit+0xa0>)
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1c:	4a0e      	ldr	r2, [pc, #56]	; (8005b58 <HAL_PCD_MspInit+0xa0>)
 8005b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b22:	6353      	str	r3, [r2, #52]	; 0x34
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <HAL_PCD_MspInit+0xa0>)
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2c:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <HAL_PCD_MspInit+0xa0>)
 8005b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b32:	6453      	str	r3, [r2, #68]	; 0x44
 8005b34:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <HAL_PCD_MspInit+0xa0>)
 8005b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2100      	movs	r1, #0
 8005b44:	2043      	movs	r0, #67	; 0x43
 8005b46:	f7fa ff7c 	bl	8000a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005b4a:	2043      	movs	r0, #67	; 0x43
 8005b4c:	f7fa ff95 	bl	8000a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005b50:	bf00      	nop
 8005b52:	3728      	adds	r7, #40	; 0x28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	40020000 	.word	0x40020000

08005b60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f7fe fd75 	bl	8004666 <USBD_LL_SetupStage>
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005b96:	78fa      	ldrb	r2, [r7, #3]
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	4619      	mov	r1, r3
 8005bae:	f7fe fdaf 	bl	8004710 <USBD_LL_DataOutStage>
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005bcc:	78fa      	ldrb	r2, [r7, #3]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	3348      	adds	r3, #72	; 0x48
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	4619      	mov	r1, r3
 8005be2:	f7fe fdf8 	bl	80047d6 <USBD_LL_DataInStage>
}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fe ff0c 	bl	8004a1a <USBD_LL_SOF>
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
 8005c22:	e008      	b.n	8005c36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d102      	bne.n	8005c32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
 8005c30:	e001      	b.n	8005c36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005c32:	f7fa fcf7 	bl	8000624 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c3c:	7bfa      	ldrb	r2, [r7, #15]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe feac 	bl	800499e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe fe58 	bl	8004902 <USBD_LL_Reset>
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe fea7 	bl	80049be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <HAL_PCD_SuspendCallback+0x48>)
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	4a03      	ldr	r2, [pc, #12]	; (8005ca4 <HAL_PCD_SuspendCallback+0x48>)
 8005c96:	f043 0306 	orr.w	r3, r3, #6
 8005c9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	e000ed00 	.word	0xe000ed00

08005ca8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fe97 	bl	80049ea <USBD_LL_Resume>
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fee5 	bl	8004aaa <USBD_LL_IsoOUTIncomplete>
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fead 	bl	8004a5e <USBD_LL_IsoINIncomplete>
}
 8005d04:	bf00      	nop
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe feeb 	bl	8004af6 <USBD_LL_DevConnected>
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fee8 	bl	8004b0c <USBD_LL_DevDisconnected>
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d13c      	bne.n	8005dce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005d54:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005d64:	4b1c      	ldr	r3, [pc, #112]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005d6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d6e:	2204      	movs	r2, #4
 8005d70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005d72:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d74:	2202      	movs	r2, #2
 8005d76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005d78:	4b17      	ldr	r3, [pc, #92]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005d7e:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d80:	2202      	movs	r2, #2
 8005d82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005d84:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005d8a:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005da2:	480d      	ldr	r0, [pc, #52]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005da4:	f7fb f808 	bl	8000db8 <HAL_PCD_Init>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005dae:	f7fa fc39 	bl	8000624 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	4808      	ldr	r0, [pc, #32]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005db6:	f7fc f94e 	bl	8002056 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005dba:	2240      	movs	r2, #64	; 0x40
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4806      	ldr	r0, [pc, #24]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005dc0:	f7fc f902 	bl	8001fc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005dc4:	2280      	movs	r2, #128	; 0x80
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4803      	ldr	r0, [pc, #12]	; (8005dd8 <USBD_LL_Init+0x94>)
 8005dca:	f7fc f8fd 	bl	8001fc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	2000069c 	.word	0x2000069c

08005ddc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fb f8fd 	bl	8000ff2 <HAL_PCD_Start>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f930 	bl	8006064 <USBD_Get_USB_Status>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4603      	mov	r3, r0
 8005e22:	70fb      	strb	r3, [r7, #3]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70bb      	strb	r3, [r7, #2]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005e3a:	78bb      	ldrb	r3, [r7, #2]
 8005e3c:	883a      	ldrh	r2, [r7, #0]
 8005e3e:	78f9      	ldrb	r1, [r7, #3]
 8005e40:	f7fb fce1 	bl	8001806 <HAL_PCD_EP_Open>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 f90a 	bl	8006064 <USBD_Get_USB_Status>
 8005e50:	4603      	mov	r3, r0
 8005e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fb fd2a 	bl	80018d6 <HAL_PCD_EP_Close>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f8eb 	bl	8006064 <USBD_Get_USB_Status>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e92:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fb fdea 	bl	8001a94 <HAL_PCD_EP_SetStall>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f8cc 	bl	8006064 <USBD_Get_USB_Status>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ef4:	78fa      	ldrb	r2, [r7, #3]
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fb fe2f 	bl	8001b5c <HAL_PCD_EP_ClrStall>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 f8ad 	bl	8006064 <USBD_Get_USB_Status>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da0b      	bge.n	8005f4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f3a:	68f9      	ldr	r1, [r7, #12]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	333e      	adds	r3, #62	; 0x3e
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	e00b      	b.n	8005f64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	4613      	mov	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fb fc14 	bl	80017bc <HAL_PCD_SetAddress>
 8005f94:	4603      	mov	r3, r0
 8005f96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f862 	bl	8006064 <USBD_Get_USB_Status>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b086      	sub	sp, #24
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005fcc:	7af9      	ldrb	r1, [r7, #11]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	f7fb fd15 	bl	8001a00 <HAL_PCD_EP_Transmit>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 f841 	bl	8006064 <USBD_Get_USB_Status>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005fe6:	7dbb      	ldrb	r3, [r7, #22]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800600e:	7af9      	ldrb	r1, [r7, #11]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	f7fb fca9 	bl	800196a <HAL_PCD_EP_Receive>
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f820 	bl	8006064 <USBD_Get_USB_Status>
 8006024:	4603      	mov	r3, r0
 8006026:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006028:	7dbb      	ldrb	r3, [r7, #22]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <USBD_static_malloc+0x18>)
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	200001a0 	.word	0x200001a0

08006050 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]

}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d817      	bhi.n	80060a8 <USBD_Get_USB_Status+0x44>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <USBD_Get_USB_Status+0x1c>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	08006091 	.word	0x08006091
 8006084:	08006097 	.word	0x08006097
 8006088:	0800609d 	.word	0x0800609d
 800608c:	080060a3 	.word	0x080060a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
    break;
 8006094:	e00b      	b.n	80060ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006096:	2303      	movs	r3, #3
 8006098:	73fb      	strb	r3, [r7, #15]
    break;
 800609a:	e008      	b.n	80060ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
    break;
 80060a0:	e005      	b.n	80060ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80060a2:	2303      	movs	r3, #3
 80060a4:	73fb      	strb	r3, [r7, #15]
    break;
 80060a6:	e002      	b.n	80060ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80060a8:	2303      	movs	r3, #3
 80060aa:	73fb      	strb	r3, [r7, #15]
    break;
 80060ac:	bf00      	nop
  }
  return usb_status;
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <USB_charToCode>:

extern USBD_HandleTypeDef hUsbDeviceFS;
static uint8_t HID_buffer[8];

static void USB_charToCode(char ch)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	71fb      	strb	r3, [r7, #7]
	// Check if lower or upper case
	if(ch >= 'a' && ch <= 'z')
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	2b60      	cmp	r3, #96	; 0x60
 80060ca:	d90b      	bls.n	80060e4 <USB_charToCode+0x28>
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	2b7a      	cmp	r3, #122	; 0x7a
 80060d0:	d808      	bhi.n	80060e4 <USB_charToCode+0x28>
	{
		HID_buffer[0] = 0;
 80060d2:	4b5d      	ldr	r3, [pc, #372]	; (8006248 <USB_charToCode+0x18c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
		// convert ch to HID letter, starting at a = 4
		HID_buffer[2] = (uint8_t)(4 + (ch - 'a'));
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	3b5d      	subs	r3, #93	; 0x5d
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	4b5a      	ldr	r3, [pc, #360]	; (8006248 <USB_charToCode+0x18c>)
 80060e0:	709a      	strb	r2, [r3, #2]
 80060e2:	e0aa      	b.n	800623a <USB_charToCode+0x17e>
	}
	else if(ch >= 'A' && ch <= 'Z')
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d90e      	bls.n	8006108 <USB_charToCode+0x4c>
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	2b5a      	cmp	r3, #90	; 0x5a
 80060ee:	d80b      	bhi.n	8006108 <USB_charToCode+0x4c>
	{
		// Add left shift
		HID_buffer[0] = USB_HID_MODIFIER_LEFT_SHIFT;
 80060f0:	4b55      	ldr	r3, [pc, #340]	; (8006248 <USB_charToCode+0x18c>)
 80060f2:	2202      	movs	r2, #2
 80060f4:	701a      	strb	r2, [r3, #0]
		// convert ch to lower case
		ch = ch - ('A'-'a');
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	3320      	adds	r3, #32
 80060fa:	71fb      	strb	r3, [r7, #7]
		// convert ch to HID letter, starting at a = 4
		HID_buffer[2] = (uint8_t)(4 + (ch - 'a'));
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	3b5d      	subs	r3, #93	; 0x5d
 8006100:	b2da      	uxtb	r2, r3
 8006102:	4b51      	ldr	r3, [pc, #324]	; (8006248 <USB_charToCode+0x18c>)
 8006104:	709a      	strb	r2, [r3, #2]
 8006106:	e098      	b.n	800623a <USB_charToCode+0x17e>
	}
	else if(ch >= '0' && ch <= '9') // Check if number
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	2b2f      	cmp	r3, #47	; 0x2f
 800610c:	d912      	bls.n	8006134 <USB_charToCode+0x78>
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	2b39      	cmp	r3, #57	; 0x39
 8006112:	d80f      	bhi.n	8006134 <USB_charToCode+0x78>
	{
		HID_buffer[0] = 0;
 8006114:	4b4c      	ldr	r3, [pc, #304]	; (8006248 <USB_charToCode+0x18c>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
		// convert ch to HID number, starting at 1 = 30, 0 = 39
		if(ch == '0')
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d103      	bne.n	8006128 <USB_charToCode+0x6c>
		{
			HID_buffer[2] = 39;
 8006120:	4b49      	ldr	r3, [pc, #292]	; (8006248 <USB_charToCode+0x18c>)
 8006122:	2227      	movs	r2, #39	; 0x27
 8006124:	709a      	strb	r2, [r3, #2]
		if(ch == '0')
 8006126:	e088      	b.n	800623a <USB_charToCode+0x17e>
		}
		else
		{
			HID_buffer[2] = (uint8_t)(30 + (ch - '1'));
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	3b13      	subs	r3, #19
 800612c:	b2da      	uxtb	r2, r3
 800612e:	4b46      	ldr	r3, [pc, #280]	; (8006248 <USB_charToCode+0x18c>)
 8006130:	709a      	strb	r2, [r3, #2]
		if(ch == '0')
 8006132:	e082      	b.n	800623a <USB_charToCode+0x17e>
		}
	}
	else // not a letter nor a number
	{
		switch(ch)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b0a      	cmp	r3, #10
 8006138:	d05c      	beq.n	80061f4 <USB_charToCode+0x138>
 800613a:	2b0a      	cmp	r3, #10
 800613c:	db76      	blt.n	800622c <USB_charToCode+0x170>
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	dc74      	bgt.n	800622c <USB_charToCode+0x170>
 8006142:	2b20      	cmp	r3, #32
 8006144:	db72      	blt.n	800622c <USB_charToCode+0x170>
 8006146:	3b20      	subs	r3, #32
 8006148:	2b20      	cmp	r3, #32
 800614a:	d86f      	bhi.n	800622c <USB_charToCode+0x170>
 800614c:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <USB_charToCode+0x98>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	080061d9 	.word	0x080061d9
 8006158:	08006203 	.word	0x08006203
 800615c:	0800622d 	.word	0x0800622d
 8006160:	0800622d 	.word	0x0800622d
 8006164:	0800622d 	.word	0x0800622d
 8006168:	0800622d 	.word	0x0800622d
 800616c:	0800622d 	.word	0x0800622d
 8006170:	0800622d 	.word	0x0800622d
 8006174:	0800622d 	.word	0x0800622d
 8006178:	0800622d 	.word	0x0800622d
 800617c:	0800622d 	.word	0x0800622d
 8006180:	0800622d 	.word	0x0800622d
 8006184:	0800622d 	.word	0x0800622d
 8006188:	0800622d 	.word	0x0800622d
 800618c:	080061e7 	.word	0x080061e7
 8006190:	0800622d 	.word	0x0800622d
 8006194:	0800622d 	.word	0x0800622d
 8006198:	0800622d 	.word	0x0800622d
 800619c:	0800622d 	.word	0x0800622d
 80061a0:	0800622d 	.word	0x0800622d
 80061a4:	0800622d 	.word	0x0800622d
 80061a8:	0800622d 	.word	0x0800622d
 80061ac:	0800622d 	.word	0x0800622d
 80061b0:	0800622d 	.word	0x0800622d
 80061b4:	0800622d 	.word	0x0800622d
 80061b8:	0800622d 	.word	0x0800622d
 80061bc:	0800622d 	.word	0x0800622d
 80061c0:	0800622d 	.word	0x0800622d
 80061c4:	0800622d 	.word	0x0800622d
 80061c8:	0800622d 	.word	0x0800622d
 80061cc:	0800622d 	.word	0x0800622d
 80061d0:	08006211 	.word	0x08006211
 80061d4:	0800621f 	.word	0x0800621f
		{
			case ' ':
				HID_buffer[0] = 0;
 80061d8:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <USB_charToCode+0x18c>)
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = 44;
 80061de:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <USB_charToCode+0x18c>)
 80061e0:	222c      	movs	r2, #44	; 0x2c
 80061e2:	709a      	strb	r2, [r3, #2]
				break;
 80061e4:	e029      	b.n	800623a <USB_charToCode+0x17e>
			case '.':
				HID_buffer[0] = 0;
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <USB_charToCode+0x18c>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = 55;
 80061ec:	4b16      	ldr	r3, [pc, #88]	; (8006248 <USB_charToCode+0x18c>)
 80061ee:	2237      	movs	r2, #55	; 0x37
 80061f0:	709a      	strb	r2, [r3, #2]
				break;
 80061f2:	e022      	b.n	800623a <USB_charToCode+0x17e>
			case '\n':
				HID_buffer[0] = 0;
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <USB_charToCode+0x18c>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = 40;
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <USB_charToCode+0x18c>)
 80061fc:	2228      	movs	r2, #40	; 0x28
 80061fe:	709a      	strb	r2, [r3, #2]
				break;
 8006200:	e01b      	b.n	800623a <USB_charToCode+0x17e>
			case '!':
				//combination of shift modifier and key
				HID_buffer[0] = USB_HID_MODIFIER_LEFT_SHIFT;	// shift
 8006202:	4b11      	ldr	r3, [pc, #68]	; (8006248 <USB_charToCode+0x18c>)
 8006204:	2202      	movs	r2, #2
 8006206:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = 30; // number 1
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <USB_charToCode+0x18c>)
 800620a:	221e      	movs	r2, #30
 800620c:	709a      	strb	r2, [r3, #2]
				break;
 800620e:	e014      	b.n	800623a <USB_charToCode+0x17e>
			case '?':
				//combination of shift modifier and key
				HID_buffer[0] = USB_HID_MODIFIER_LEFT_SHIFT;	// shift
 8006210:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <USB_charToCode+0x18c>)
 8006212:	2202      	movs	r2, #2
 8006214:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = USB_HID_FSLASH; // key '/'
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <USB_charToCode+0x18c>)
 8006218:	2238      	movs	r2, #56	; 0x38
 800621a:	709a      	strb	r2, [r3, #2]
				break;
 800621c:	e00d      	b.n	800623a <USB_charToCode+0x17e>
			case '@':
				//combination of shift modifier and key
				HID_buffer[0] = USB_HID_MODIFIER_LEFT_SHIFT;	// shift
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <USB_charToCode+0x18c>)
 8006220:	2202      	movs	r2, #2
 8006222:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = 31; // number 2
 8006224:	4b08      	ldr	r3, [pc, #32]	; (8006248 <USB_charToCode+0x18c>)
 8006226:	221f      	movs	r2, #31
 8006228:	709a      	strb	r2, [r3, #2]
				break;
 800622a:	e006      	b.n	800623a <USB_charToCode+0x17e>
			default:
				HID_buffer[0] = 0;
 800622c:	4b06      	ldr	r3, [pc, #24]	; (8006248 <USB_charToCode+0x18c>)
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
				HID_buffer[2] = 0; // not implemented
 8006232:	4b05      	ldr	r3, [pc, #20]	; (8006248 <USB_charToCode+0x18c>)
 8006234:	2200      	movs	r2, #0
 8006236:	709a      	strb	r2, [r3, #2]
		}
	}
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	200001c0 	.word	0x200001c0

0800624c <USB_Keyboard_SendChar>:

// Send character as a single key press
void USB_Keyboard_SendChar(char ch)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	// Convert character to usb hid key code
	USB_charToCode(ch);
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff ff2f 	bl	80060bc <USB_charToCode>

	// press keys
#if defined(USE_CUSTOM_HID)
	ret = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
 800625e:	2208      	movs	r2, #8
 8006260:	4913      	ldr	r1, [pc, #76]	; (80062b0 <USB_Keyboard_SendChar+0x64>)
 8006262:	4814      	ldr	r0, [pc, #80]	; (80062b4 <USB_Keyboard_SendChar+0x68>)
 8006264:	f7fe f86a 	bl	800433c <USBD_CUSTOM_HID_SendReport>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
#else
	ret = USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
#endif
	if(ret != HAL_OK)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <USB_Keyboard_SendChar+0x2a>
	{
		Error_Handler();
 8006272:	f7fa f9d7 	bl	8000624 <Error_Handler>
	}
	HAL_Delay(15);
 8006276:	200f      	movs	r0, #15
 8006278:	f7fa fae4 	bl	8000844 <HAL_Delay>

	// release keys
	HID_buffer[0] = 0;
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <USB_Keyboard_SendChar+0x64>)
 800627e:	2200      	movs	r2, #0
 8006280:	701a      	strb	r2, [r3, #0]
	HID_buffer[2] = 0;
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <USB_Keyboard_SendChar+0x64>)
 8006284:	2200      	movs	r2, #0
 8006286:	709a      	strb	r2, [r3, #2]
#if defined(USE_CUSTOM_HID)
#else
	ret = USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
#endif
	ret = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
 8006288:	2208      	movs	r2, #8
 800628a:	4909      	ldr	r1, [pc, #36]	; (80062b0 <USB_Keyboard_SendChar+0x64>)
 800628c:	4809      	ldr	r0, [pc, #36]	; (80062b4 <USB_Keyboard_SendChar+0x68>)
 800628e:	f7fe f855 	bl	800433c <USBD_CUSTOM_HID_SendReport>
 8006292:	4603      	mov	r3, r0
 8006294:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <USB_Keyboard_SendChar+0x54>
	{
		Error_Handler();
 800629c:	f7fa f9c2 	bl	8000624 <Error_Handler>
	}
	HAL_Delay(15);
 80062a0:	200f      	movs	r0, #15
 80062a2:	f7fa facf 	bl	8000844 <HAL_Delay>
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	200001c0 	.word	0x200001c0
 80062b4:	200001cc 	.word	0x200001cc

080062b8 <USB_Keyboard_SendString>:

// Send string as letters
void USB_Keyboard_SendString(char * s)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]

	while(*(s+i))
 80062c4:	e009      	b.n	80062da <USB_Keyboard_SendString+0x22>
	{
		USB_Keyboard_SendChar(*(s+i));
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4413      	add	r3, r2
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ffbc 	bl	800624c <USB_Keyboard_SendChar>
		i++;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	3301      	adds	r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]
	while(*(s+i))
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	4413      	add	r3, r2
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1ef      	bne.n	80062c6 <USB_Keyboard_SendString+0xe>
	}
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <__libc_init_array>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	4d0d      	ldr	r5, [pc, #52]	; (8006328 <__libc_init_array+0x38>)
 80062f4:	4c0d      	ldr	r4, [pc, #52]	; (800632c <__libc_init_array+0x3c>)
 80062f6:	1b64      	subs	r4, r4, r5
 80062f8:	10a4      	asrs	r4, r4, #2
 80062fa:	2600      	movs	r6, #0
 80062fc:	42a6      	cmp	r6, r4
 80062fe:	d109      	bne.n	8006314 <__libc_init_array+0x24>
 8006300:	4d0b      	ldr	r5, [pc, #44]	; (8006330 <__libc_init_array+0x40>)
 8006302:	4c0c      	ldr	r4, [pc, #48]	; (8006334 <__libc_init_array+0x44>)
 8006304:	f000 f820 	bl	8006348 <_init>
 8006308:	1b64      	subs	r4, r4, r5
 800630a:	10a4      	asrs	r4, r4, #2
 800630c:	2600      	movs	r6, #0
 800630e:	42a6      	cmp	r6, r4
 8006310:	d105      	bne.n	800631e <__libc_init_array+0x2e>
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	f855 3b04 	ldr.w	r3, [r5], #4
 8006318:	4798      	blx	r3
 800631a:	3601      	adds	r6, #1
 800631c:	e7ee      	b.n	80062fc <__libc_init_array+0xc>
 800631e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006322:	4798      	blx	r3
 8006324:	3601      	adds	r6, #1
 8006326:	e7f2      	b.n	800630e <__libc_init_array+0x1e>
 8006328:	080063e0 	.word	0x080063e0
 800632c:	080063e0 	.word	0x080063e0
 8006330:	080063e0 	.word	0x080063e0
 8006334:	080063e4 	.word	0x080063e4

08006338 <memset>:
 8006338:	4402      	add	r2, r0
 800633a:	4603      	mov	r3, r0
 800633c:	4293      	cmp	r3, r2
 800633e:	d100      	bne.n	8006342 <memset+0xa>
 8006340:	4770      	bx	lr
 8006342:	f803 1b01 	strb.w	r1, [r3], #1
 8006346:	e7f9      	b.n	800633c <memset+0x4>

08006348 <_init>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	bf00      	nop
 800634c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634e:	bc08      	pop	{r3}
 8006350:	469e      	mov	lr, r3
 8006352:	4770      	bx	lr

08006354 <_fini>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	bf00      	nop
 8006358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635a:	bc08      	pop	{r3}
 800635c:	469e      	mov	lr, r3
 800635e:	4770      	bx	lr
